<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ionizing Radiation</title><link>http://ionizing.page/</link><description>Recent content on Ionizing Radiation</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 06 Aug 2021 14:44:00 +0800</lastBuildDate><atom:link href="http://ionizing.page/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>http://ionizing.page/about/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0800</pubDate><guid>http://ionizing.page/about/</guid><description>&lt;p>A Ph.D candidate who majors in physical chemistry.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Abilities&lt;/th>
&lt;th>Level&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>C/C++&lt;/td>
&lt;td>Beginner&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rust&lt;/td>
&lt;td>Beginner&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LaTeX&lt;/td>
&lt;td>Newbie&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VASP&lt;/td>
&lt;td>Beginner&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Linux&lt;/td>
&lt;td>Beginner&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://english.stackexchange.com/questions/83832/list-of-expertise-levels-from-beginner-to-expert">https://english.stackexchange.com/questions/83832/list-of-expertise-levels-from-beginner-to-expert&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>External-link</title><link>http://ionizing.page/external-link/</link><pubDate>Fri, 16 Apr 2021 21:26:00 +0800</pubDate><guid>http://ionizing.page/external-link/</guid><description>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Person&lt;/th>
&lt;th>Link&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Liam0205&lt;/td>
&lt;td>&lt;a href="https://liam.page/about/">https://liam.page/about/&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mr. Joker&lt;/td>
&lt;td>&lt;a href="https://mrjokersince1997.gitee.io">https://mrjokersince1997.gitee.io&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>使用数值方法求解单电子 Schrodinger 方程</title><link>http://ionizing.page/post/schrodinger-equation-numerical-methods/</link><pubDate>Fri, 06 Aug 2021 14:44:00 +0800</pubDate><guid>http://ionizing.page/post/schrodinger-equation-numerical-methods/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#%E5%8D%95%E7%B2%92%E5%AD%90%E5%AE%9A%E6%80%81-schrodinger-%E6%96%B9%E7%A8%8B">单粒子定态 Schrodinger 方程&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%9C%89%E9%99%90%E5%B7%AE%E5%88%86%E6%B3%95">有限差分法&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E4%B8%80%E9%98%B6%E5%AF%BC%E6%95%B0%E7%9A%84%E7%A6%BB%E6%95%A3%E5%8C%96">一阶导数的离散化&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BA%8C%E9%98%B6%E5%AF%BC%E6%95%B0%E7%9A%84%E7%A6%BB%E6%95%A3%E5%8C%96">二阶导数的离散化&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%80%E7%BB%B4%E7%B3%BB%E7%BB%9F-hamiltonian-%E7%9A%84%E6%9E%84%E9%80%A0%E5%8F%8A%E6%B1%82%E8%A7%A3">一维系统 Hamiltonian 的构造及求解&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E4%B8%80%E7%BB%B4%E5%8A%BF%E7%AE%B1%E6%A8%A1%E5%9E%8B%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%B1%82%E8%A7%A3">一维势箱模型系统的求解&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%B8%A6%E6%9C%89-chulkov-%E5%8A%BF%E7%9A%84%E4%B8%80%E7%BB%B4%E5%8A%BF%E7%AE%B1%E7%B3%BB%E7%BB%9F%E6%B1%82%E8%A7%A3">带有 Chulkov 势的一维势箱系统求解&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E4%BA%8C%E7%BB%B4%E5%8F%8A%E6%9B%B4%E9%AB%98%E7%BB%B4%E7%B3%BB%E7%BB%9F%E7%9A%84-hamiltonian-%E6%9E%84%E9%80%A0%E4%B8%8E%E6%B1%82%E8%A7%A3">二维及更高维系统的 Hamiltonian 构造与求解&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E9%AB%98%E7%BB%B4-laplacian-%E7%9A%84%E7%A6%BB%E6%95%A3%E5%8C%96">高维 Laplacian 的离散化&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%AB%98%E7%BB%B4-hamiltonian-%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E6%B1%82%E8%A7%A3">高维 Hamiltonian 的构造与求解&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%9C%89%E9%99%90%E5%85%83%E6%B3%95">有限元法&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%AE%9A%E6%80%81-schrodinger-%E6%96%B9%E7%A8%8B%E7%9A%84%E5%8F%98%E5%88%86%E5%BC%B1%E8%A7%A3%E5%BD%A2%E5%BC%8F">定态 Schrodinger 方程的变分弱解形式&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E5%8F%8A%E7%BB%93%E6%9E%9C%E9%AA%8C%E8%AF%81">程序实现及结果验证&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%80%BB%E7%BB%93%E5%8F%8A%E5%90%90%E6%A7%BD">总结及吐槽&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%90%90%E6%A7%BD">吐槽&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>经常有人觉得会解薛定谔方程会给人一种很厉害的感觉（尤其是对还没学过 QM QC 等课程中学生小朋友而言），
确实，现在能写出解析解的 Schrodinger 方程屈指可数；
而且仅仅增加粒子数量不考虑各种修正就足以使求解的难度上升一大截。
不过在这里我们不考虑多个粒子的情况，也不考虑什么相对论效应 blabla ，
我们只考虑一个电子在一个任意势场下的定态 Schrodinger 方程，
然后来用数值方法求解这个方程，得到电子的波函数并可视化，
顺便验证一下教材上各种电子轨道的分布图，体验一把亲手解 Schrodinger 方程的感觉。&lt;/p>
&lt;p>这里本文是在实空间的笛卡尔坐标系进行求解。&lt;/p>
&lt;h2 id="单粒子定态-schrodinger-方程">单粒子定态 Schrodinger 方程&lt;/h2>
&lt;p>考虑一个电子在势场 \(V\) 中，它的定态 Schrodinger 方程是&lt;/p>
&lt;p>\begin{equation}
\hat{H} \Psi(x, y, z) = E\Psi(x, y, z)
\end{equation}&lt;/p>
&lt;p>如果这个势场是 \(V = 0\) ，并且限定这个电子在一个边长为 \(a\) 的箱子内，此时 Schrodinger 方程就变成了&lt;/p>
&lt;p>\begin{equation}
-\frac{\hbar^2}{2m} \left( \frac{\partial^2}{\partial x^2} +
\frac{\partial^2}{\partial y^2} +
\frac{\partial^2}{\partial z^2} \right)
\Psi(x, y, z) = E\Psi(x, y, z)
\end{equation}&lt;/p>
&lt;p>这个方程可以写出解析解&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>
（参加过考试的同学应该能默写这个公式了）：&lt;/p>
&lt;p>\[E = (n_x^2 + n_y^2 + n_z^2) \frac{h^2}{8ma^2}\]&lt;/p>
&lt;p>\[ \begin{aligned}
\Psi(x, y, z) &amp;amp;={} X(x)Y(y)Z(z) \newline
&amp;amp;={} \sqrt{\frac{8}{a^3}}\sin(\frac{n_x \pi x}{a})\sin(\frac{n_y \pi y}{a})\sin(\frac{n_z \pi z}{a})
\end{aligned} \]&lt;/p>
&lt;p>这是三维情况下的解，如果体系只有一维，它的能级表达式是&lt;/p>
&lt;p>\[
E = \frac{n^2 h^2}{8ma^2} \newline
\Psi(x) = \sqrt{\frac{2}{a}} \sin(\frac{n \pi x}{a})
\]&lt;/p>
&lt;p>这是它们的解析解，也是我们后面验证结果正确性的参考。
以上结果的推导请参考任意一本《量子力学》或《量子化学》或者《结构化学》。&lt;/p>
&lt;h2 id="有限差分法">有限差分法&lt;/h2>
&lt;p>所谓有限差分法，就是有限差分来近似导数，从而寻求微分方程近似解的方法。针对导数的有限差分操作可以参考 &lt;a href="https://en.wikipedia.org/wiki/Finite%5Fdifference%5Fcoefficient">Wikipedia&lt;/a> &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>，
简单来说就是用各种近似方法来逼近导数的值。&lt;/p>
&lt;p>假设存在一个离散的函数 \(f(x), x = x_1, x_2, &amp;hellip; , x_n\) ，并且 \(x_{i+1} - x_{i} = \Delta x\) 为一定值，
根据有限差分的推导，可以得到下面的结论：&lt;/p>
&lt;h3 id="一阶导数的离散化">一阶导数的离散化&lt;/h3>
&lt;p>这里使用一种最为常见的离散化方法来近似一阶导数：&lt;/p>
&lt;p>\begin{equation}
f'(x_i) \approx \frac{f(x_i+\Delta x) - f(x_i - \Delta x)}{2\Delta x}
= \frac{f(x_{i+1}) - f(x_{i-1})}{2\Delta x}
\end{equation}&lt;/p>
&lt;p>再假设 \(f(x)\) 可以写成一个列向量 \(\ket{f} = \begin{bmatrix} f(x_1), f(x_2),
\cdots, f(x_n) \end{bmatrix}^T\) ，那么一阶导数算符 \(\dfrac{d}{dx}\) 可以写成&lt;/p>
&lt;p>\[\frac{d}{dx}
\begin{bmatrix} f(x_1)\newline f(x_2) \newline \vdots \newline f(x_n) \end{bmatrix} =
\frac{1}{2\Delta x}
\begin{bmatrix}
0 &amp;amp; 1 &amp;amp; &amp;amp; &amp;amp; \newline
-1 &amp;amp; 0 &amp;amp; 1 &amp;amp; &amp;amp; \newline
&amp;amp; -1 &amp;amp; 0 &amp;amp; \ddots &amp;amp; \newline
&amp;amp; &amp;amp; \ddots &amp;amp; \ddots &amp;amp; 1 \newline
&amp;amp; &amp;amp; &amp;amp; -1 &amp;amp; 0
\end{bmatrix} \cdot
\begin{bmatrix} f(x_1)\newline f(x_2) \newline \vdots \newline f(x_n) \end{bmatrix} \]&lt;/p>
&lt;p>这是在没有处理边界条件的情况下的一阶导数算符，
如果考虑周期性边界条件，上式矩阵的左下角和右上角分别为 1 和 -1 。
此外这种方法近似得到的一阶导的精度是 \(O((\Delta x)^2)\) ，
更高阶的近似及其它非对称的方法请参考本节之前提到的 Wikipedia 。&lt;/p>
&lt;h3 id="二阶导数的离散化">二阶导数的离散化&lt;/h3>
&lt;p>比较常见的二阶导数离散化方法如下：&lt;/p>
&lt;p>\begin{equation}\begin{aligned}
f'(x_i+\frac{1}{2} \Delta x) &amp;amp;\approx{} \frac{f(x_i + \Delta x) - f(x_i)}{\Delta x}
= \frac{f(x_{i+1}) - f(x_i)}{\Delta x} \newline
f'(x_i-\frac{1}{2} \Delta x) &amp;amp;\approx{} \frac{f(x_i) - f(x_i - \Delta x)}{\Delta x}
= \frac{f(x_i) - f(x_{i-1})}{\Delta x} \newline
f''(x_i) &amp;amp;\approx{} \frac{ f'(x_i+\frac{1}{2} \Delta x) - f'(x_i-\frac{1}{2} \Delta x) }{\Delta x} \newline
&amp;amp;={} \frac{ f(x_{i+1}) + f(x_{i-1}) - 2f(x_i) }{(\Delta x)^2}
\end{aligned}\end{equation}&lt;/p>
&lt;p>同样，它也可以用矩阵的形式表达出来：&lt;/p>
&lt;p>\[ \frac{d^2}{dx^2}
\begin{bmatrix} f(x_1)\newline f(x_2) \newline \vdots \newline f(x_n) \end{bmatrix} =
\frac{1}{(\Delta x)^2}
\begin{bmatrix}
-2 &amp;amp; 1 &amp;amp; &amp;amp; &amp;amp; \newline
1 &amp;amp; -2 &amp;amp; 1 &amp;amp; &amp;amp; \newline
&amp;amp; 1 &amp;amp; -2 &amp;amp; \ddots &amp;amp; \newline
&amp;amp; &amp;amp; \ddots &amp;amp; \ddots &amp;amp; 1 \newline
&amp;amp; &amp;amp; &amp;amp; 1 &amp;amp; -2
\end{bmatrix} \cdot
\begin{bmatrix} f(x_1)\newline f(x_2) \newline \vdots \newline f(x_n) \end{bmatrix} \]&lt;/p>
&lt;p>如果需要考虑周期性边界条件，矩阵的左下角和右上角都应为 1 。
这种方法近似的精度是 \(O((\Delta x)^2)\) 。&lt;/p>
&lt;h3 id="一维系统-hamiltonian-的构造及求解">一维系统 Hamiltonian 的构造及求解&lt;/h3>
&lt;h4 id="一维势箱模型系统的求解">一维势箱模型系统的求解&lt;/h4>
&lt;p>Hamiltonian 的整体表达式为&lt;/p>
&lt;p>\[ H = T + V \]&lt;/p>
&lt;p>如果系统只有一维，那么 Hamiltonian 很好构造，直接在 \(T\) 的基础上加上势能即可&lt;/p>
&lt;p>\[H = \frac{1}{(\Delta x)^2}
\begin{bmatrix}
-2 &amp;amp; 1 &amp;amp; &amp;amp; &amp;amp; \newline
1 &amp;amp; -2 &amp;amp; 1 &amp;amp; &amp;amp; \newline
&amp;amp; 1 &amp;amp; -2 &amp;amp; \ddots &amp;amp; \newline
&amp;amp; &amp;amp; \ddots &amp;amp; \ddots &amp;amp; 1 \newline
&amp;amp; &amp;amp; &amp;amp; 1 &amp;amp; -2
\end{bmatrix} +
\begin{bmatrix}
V_1 &amp;amp; &amp;amp; &amp;amp; \newline
&amp;amp; V_2 &amp;amp; &amp;amp; \newline
&amp;amp; &amp;amp; \ddots &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; V_n
\end{bmatrix} \]&lt;/p>
&lt;p>然后我们的问题就变成了&lt;/p>
&lt;p>\[
H \ket{\psi} = E\ket{\psi}
\]&lt;/p>
&lt;p>这是一个典型的本征值问题，只要对 \(H\) 进行对角化就可以得到我们想到的能量 \(E\) 和波函数 \(\ket{\psi}\) 。
下面是它的程序实现（本文使用 Julia 作为有限差分法的实现语言）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="c">#!/usr/bin/env julia&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">LinearAlgebra&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">SparseArrays&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">Arpack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">Plots&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c"># Constants Part&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># sample points&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># box length&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">3.8099821161548593&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># hbar^2 / (2*m_e) = (Å^2) / eV&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># relative mass of electron&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">nev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># number of eigen values to be covered&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LinRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c"># Hamiltonian Part&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="n">T_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sparse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">2.0&lt;/span>&lt;span class="nb">I&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">T_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">diagind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">T_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">diagind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">T_&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">T&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">deepcopy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">H&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hamiltonian constructed, start solving ...&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nd">@time&lt;/span> &lt;span class="n">λ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ϕ&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">eigs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">H&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nev&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">nev&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">which&lt;/span>&lt;span class="o">=:&lt;/span>&lt;span class="n">LM&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sigma&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mf">0.0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nd">@show&lt;/span> &lt;span class="n">λ&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c"># Hamiltonian Part&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="kp">in&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">nev&lt;/span>
&lt;span class="n">ϕ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">./=&lt;/span> &lt;span class="n">norm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ϕ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c"># Normalization&lt;/span>
&lt;span class="nd">@assert&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ϕ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.^&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="n">≈&lt;/span> &lt;span class="mf">1.0&lt;/span> &lt;span class="c"># verify the norm: ∫ |ϕ|² dx == 1&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="nd">@show&lt;/span> &lt;span class="n">maximum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ϕ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">plot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ϕ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">layout&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">800&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">600&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">savefig&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;./1D-particle-in-a-box-eigvec.svg&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">Hamiltonian ready, start solving ...
1.991257 seconds (7.25 M allocations: 439.625 MiB, 8.56% gc time, 99.53% compilation time)
λ = [37.58797833051402, 150.3518984879221, 338.29171597315013, 601.4073566198176]
maximum(ϕ[:, 1]) = 1.4140720924720651
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面我们来验证一下程序的结果：&lt;/p>
&lt;p>程序中有 \(k = \hbar^2 / 2m_e = 3.80998 (\mathrm{Å^2/eV})\) ，它把一些物理常数打包处理并化为原子单位制，
因此在和解析解对比时也要以此为准，此外程序中定义 \(a=1Å\) ，没有显式处理边界条件。势箱模型中解析解为&lt;/p>
&lt;p>\[
E = \frac{n^2 h^2}{8ma^2} = \frac{\hbar^2}{2m} \cdot \frac{4\pi^2 n^2}{4a^2} = \frac{kn^2\pi^2}{a^2}
\]&lt;/p>
&lt;p>代入 \(k\) 和 \(a\) ，得到 \(E_1 = 37.6029953761\) ，与数值解 \(\lambda_1=37.58797833051402\) 对比相当接近，
继续验证 \(\lambda_2\) 、 \(\lambda_3\) 等可以发现它们也符合 \(n^2\) 的增长曲线（读者可自行验证）。&lt;/p>
&lt;p>再来验证一下波函数：
&lt;img src="http://ionizing.page/ox-hugo/1D-particle-in-a-box-eigvec.svg" alt="">&lt;/p>
&lt;p>它显然符合正弦曲线的特征，并且在边界处为 0 ，最大值为 1.414072 与归一化因子 \(\sqrt{2} = 1.414213\)
相差也在允许范围内，因此现在可以放心地说，如果 \(T\) 没有特殊边界条件处理，
它的边界条件就是使边界处的波函数为 0 ，这在后面的计算中可以得到进一步验证。&lt;/p>
&lt;h4 id="带有-chulkov-势的一维势箱系统求解">带有 Chulkov 势的一维势箱系统求解&lt;/h4>
&lt;p>上面的系统中电子不受束缚， Hamiltonian 里没有势能这一项，这也就没有验证势能项加在对角线上的合理性，
下面我们使用一种于二十年前被提出的势能函数来验证这一点。&lt;/p>
&lt;p>Chulkov &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>
等于 1997 年提出一种势能用于模拟出金属表面的镜像态。它以金属表面为 0 点， 0 以下使用正弦函数模拟金属的体相内的势能， 0 及以上使用正弦及指数函数等模拟金属表面以外的镜像势，它有如下形式：&lt;/p>
&lt;p>\[
V_m(z) = \begin{cases}
-A_{10} + A_1 \cos \left( \frac{2\pi}{d_m} z \right) &amp;amp; z \le 0 \newline
-A_{20} + A_2 \cos(\beta z) &amp;amp; 0 &amp;lt; z \le z_1 \newline
-A_3 \exp\left[-\alpha(z-z_1)\right] &amp;amp; z_1 &amp;lt; z \le z_\mathrm{im} \newline
\dfrac{\exp\left[ -\lambda (z-z_\mathrm{im}) \right]-1}{4(z-z_\mathrm{im})} &amp;amp; z &amp;gt; z_\mathrm{im}
\end{cases}
\]&lt;/p>
&lt;p>体现在图像上是这个样子的：&lt;/p>
&lt;link rel="stylesheet" href="http://ionizing.page/css/hugo-easy-gallery.css" />
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/1D-chulkov-pot.png" />
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/1D-chulkov-pot.png" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>这里选择用于 Ag(111) 表面的各参数，代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="c">#!/usr/bin/env julia&lt;/span>
&lt;span class="c"># Reference: Image potential states on metal surfaces: binding energies and wave functions&lt;/span>
&lt;span class="c"># https://www.sciencedirect.com/science/article/pii/S0039602899006688&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">LinearAlgebra&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">SparseArrays&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">Arpack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">Plots&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">15000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">150.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">3.8099821161548593&lt;/span> &lt;span class="c"># hbar^2 / (2*m_e) /(Å^2) / eV&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">k_c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">14.39964547842567&lt;/span> &lt;span class="c"># (e*e / (4 * np.pi * epsilon_0)) # measured in eV / Å&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1.0&lt;/span> &lt;span class="c"># mass of electron&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">nev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c"># Potential Part&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="cm">#=
&lt;/span>&lt;span class="cm">#
&lt;/span>&lt;span class="cm"># V1(z) = -A10 + A1*cos(2pi*z/dm) z &amp;lt;= 0
&lt;/span>&lt;span class="cm"># V2(z) = -A20 + A2*cos(beta*z) 0 &amp;lt; z &amp;lt;= z1
&lt;/span>&lt;span class="cm"># V3(z) = -A3 * exp(-alpha*(z-z1)) z1 &amp;lt; z &amp;lt;= zim
&lt;/span>&lt;span class="cm"># V4(z) = (exp(-lambda*(z-zim))-1.0) / (4.0*(z-zim)) z &amp;gt; zim
&lt;/span>&lt;span class="cm">#
&lt;/span>&lt;span class="cm">=#&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">a0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.529&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c"># A, bohr raidus&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">as&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">4.43&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># a.u.&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">A10&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">9.64&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c"># eV&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">A1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">4.30&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># eV&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">A2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">3.8442&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># eV&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">beta0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">2.5649&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># 1/a.u.&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">zim0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">2.35&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># a.u.&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">dm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">as&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">a0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># A&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">A20&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">A10&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">A2&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">A1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># eV&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">beta&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">beta0&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">a0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># A^-1&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">zim&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">zim0&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">a0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># A&lt;/span>
&lt;span class="c"># const A3 = A2 / sqrt(2); # eV&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">z1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nb">pi&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">beta&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c"># A&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">A3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">A20&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">A2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">cos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">beta&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">z1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c"># eV&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">alpha&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">A2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">beta&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">sin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">beta&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">z1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">A3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># A^-1&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">lambda&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">A3&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">exp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">alpha&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">zim&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">z1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">k_c&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># A^-1&lt;/span>
&lt;span class="nd">@show&lt;/span> &lt;span class="n">A10&lt;/span> &lt;span class="n">A1&lt;/span> &lt;span class="n">dm&lt;/span> &lt;span class="n">A20&lt;/span> &lt;span class="n">A2&lt;/span> &lt;span class="n">beta&lt;/span> &lt;span class="n">A3&lt;/span> &lt;span class="n">alpha&lt;/span> &lt;span class="n">z1&lt;/span> &lt;span class="n">lambda&lt;/span> &lt;span class="n">zim&lt;/span>
&lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LinRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">V&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">similar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">A10&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">A1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">cos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="nb">pi&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">dm&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">z1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">A20&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">A2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">cos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">beta&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">z1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">z1&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">zim&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">A3&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">exp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">alpha&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">z1&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">zim&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">z1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">zim&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">exp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">lambda&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">zim&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">zim&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mf">4.0&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">zim&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">zim&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">k_c&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c"># Hamiltonian Part&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="n">Ident&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sparse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="nb">I&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">T_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sparse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">2.0&lt;/span>&lt;span class="nb">I&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">T_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">diagind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">T_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">diagind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">T_&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">T&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">deepcopy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">H&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">H&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">diagind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">H&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">.+=&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Vmin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">λ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ϕ&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">eigs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">H&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nev&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">nev&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">which&lt;/span>&lt;span class="o">=:&lt;/span>&lt;span class="n">LM&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sigma&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Vmin&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="nd">@show&lt;/span> &lt;span class="n">λ&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="kp">in&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">nev&lt;/span>
&lt;span class="n">ϕ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">./=&lt;/span> &lt;span class="n">norm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ϕ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c"># normalization&lt;/span>
&lt;span class="nd">@assert&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ϕ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.^&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="n">≈&lt;/span> &lt;span class="mf">1.0&lt;/span> &lt;span class="c"># test norm&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">plot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ϕ&lt;/span>&lt;span class="o">.^&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">layout&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">800&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">600&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">savefig&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;./1D-chulkov-eigvec.svg&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是计算结果与文献值对比&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>λ&lt;/th>
&lt;th>计算结果(eV)&lt;/th>
&lt;th>文献值(eV)&lt;/th>
&lt;th>实验值(eV)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>-0.788&lt;/td>
&lt;td>−0.77&lt;/td>
&lt;td>-0.77&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>-0.674&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>-0.533&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>-0.330&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>-0.208&lt;/td>
&lt;td>-0.22&lt;/td>
&lt;td>-0.23&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>-0.103&lt;/td>
&lt;td>-0.095&lt;/td>
&lt;td>-0.10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>-0.061&lt;/td>
&lt;td>-0.053&lt;/td>
&lt;td>-0.052&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>-0.031&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>上面表中有一些态主要分布在体相内，文献和实验中没有测到。为更明显地对比镜像态与 bulk 态的区别，
这里使用 \(|\phi|^2\) 作图：&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/1D-chulkov-eigvec.svg" />
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/1D-chulkov-eigvec.svg" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>显然， \(\phi_2\) 、 \(\phi_3\) 和 \(\phi_4\) 大部分都处于体相内，从包络线的形状看，
它们类似于刚刚讨论过的势箱内的态，但这些态不属于镜像态，所以在与实验对比时应排除在外。
而 \(\phi_1\) 、 \(\phi_5\) 、 \(\phi_6\) 和 \(\phi_7\) 在真空中的部分存在波包，且波包的数量刚好对应主量子数 \(n\) ，如 \(\phi_5\) 在 \(x\ge 0\) 的部分有两个波包，它就是 \(n=2\) 对应的本征态。&lt;/p>
&lt;h3 id="二维及更高维系统的-hamiltonian-构造与求解">二维及更高维系统的 Hamiltonian 构造与求解&lt;/h3>
&lt;p>一维情况下我们可以直接使用二阶导而无需其它处理即可构造出动能算符，但在更高维度下要如何构造动能算符，
以及 Hamiltonian 呢？&lt;/p>
&lt;h4 id="高维-laplacian-的离散化">高维 Laplacian 的离散化&lt;/h4>
&lt;p>根据 &lt;a href="https://en.wikipedia.org/wiki/Kronecker%5Fsum%5Fof%5Fdiscrete%5FLaplacians">Wikipedia&lt;/a> &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>
上关于离散 Laplacian （拉普拉斯算符）的描述，多维离散 Laplacian 是一维离散 Laplacian
的 Kronecker Sum （克罗内克和）。&lt;/p>
&lt;p>例如对于一个二维系统：&lt;/p>
&lt;p>\[
L = \bold{D}_\bold{xx} \oplus \bold{D}_\bold{yy} = \bold{D}_\bold{xx} \otimes \bold{I} + \bold{I} \otimes \bold{D}_\bold{yy}
\]&lt;/p>
&lt;p>其中 \(\bold{D}_\bold{xx}\) 、 \(\bold{D}_\bold{yy}\) 表示在 \(x\) 、 \(y\) 方向上的 Laplacian 矩阵， \(\bold{I}\) 是单位矩阵。&lt;/p>
&lt;p>注意，上式中 &amp;ldquo;\(\oplus\)&amp;rdquo; 表示 Kronecker Sum 操作而不表示矩阵 Direct Sum （直和）操作，尽管它们所用的符号是一样的；
而 &amp;ldquo;\(\otimes\)&amp;rdquo; 则可以理解为 Kronecker Product 或者 Direct Product （直积）操作，因为在此处可以认为两种操作等价。&lt;/p>
&lt;p>相应地，对于一个三维系统，它的 Laplacian 应该是&lt;/p>
&lt;p>\[
L = \bold{D}_\bold{xx} \otimes \bold{I} \otimes \bold{I} +
\bold{I} \otimes \bold{D}_\bold{yy} \otimes \bold{I} +
\bold{I} \otimes \bold{I} \otimes \bold{D}_\bold{zz}
\]&lt;/p>
&lt;p>下面通过计算二维势箱内的电子能级来验证上面式子的正确性。&lt;/p>
&lt;p>假设二维势箱是边长 \(a = 1 \rm{Å}\) 的正方形，其中的电子满足 Schrodinger 方程：&lt;/p>
&lt;p>\[\begin{aligned}
-\frac{\hbar^2}{2m_e}(\frac{\partial^2}{\partial x^2} + \frac{\partial^2}{\partial y^2}) \psi = E\psi
\end{aligned}\]&lt;/p>
&lt;p>它的 Hamiltonian 只包含 Laplacian ，解析解为&lt;/p>
&lt;p>\[\begin{aligned}
E &amp;amp;={} (n_x^2 + n_y^2)\frac{h^2}{8ma^2} \newline
\psi(x, y) &amp;amp;={} \frac{2}{a}\sin(\frac{n_x \pi x}{a}) \sin(\frac{n_y \pi y}{a})
\end{aligned}\]&lt;/p>
&lt;p>程序实现如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="c">#!/usr/bin/env julia&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">LinearAlgebra&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">SparseArrays&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">Arpack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">Plots&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c"># Constants Part&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># sample points&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># box length&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">3.8099821161548593&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># hbar^2 / (2*m_e) = (Å^2) / eV&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># relative mass of electron&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">nev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c"># number of eigen values to be covered&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LinRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LinRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">dy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c"># Hamiltonian Part&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="n">Tx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sparse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">2.0&lt;/span>&lt;span class="nb">I&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">Tx&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">diagind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Tx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Tx&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">diagind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Tx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Tx&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">Ix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sparse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="nb">I&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">Ty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sparse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">2.0&lt;/span>&lt;span class="nb">I&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">Ty&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">diagind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Ty&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Ty&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">diagind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Ty&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Ty&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">Iy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sparse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="nb">I&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">T_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kron&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Tx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iy&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">kron&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Ix&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Ty&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">T&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">deepcopy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">H&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hamiltonian constructed, start solving ...&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nd">@time&lt;/span> &lt;span class="n">λ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ϕ&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">eigs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">H&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nev&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">nev&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">which&lt;/span>&lt;span class="o">=:&lt;/span>&lt;span class="n">LM&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sigma&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mf">0.0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nd">@show&lt;/span> &lt;span class="n">λ&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c"># Visualization Part&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="kp">in&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">nev&lt;/span>
&lt;span class="n">ϕ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">./=&lt;/span> &lt;span class="n">norm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ϕ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="c"># Normalization&lt;/span>
&lt;span class="nd">@assert&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ϕ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.^&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="n">≈&lt;/span> &lt;span class="mf">1.0&lt;/span> &lt;span class="c"># verify the norm: ∫ |ϕ|² dx == 1&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="nd">@show&lt;/span> &lt;span class="n">maximum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ϕ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">ψ&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">reshape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ϕ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nev&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">p1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">surface&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ψ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;ψ_1&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">p2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">surface&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ψ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;ψ_2&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">p3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">surface&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ψ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;ψ_3&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">p4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">surface&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ψ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;ψ_4&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">plot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">layout&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">800&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">500&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">savefig&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;./2D-particle-in-a-box-eigvec.svg&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>解得本征值与解析解对比如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>\(\lambda\)&lt;/th>
&lt;th>\(n_x^2 + n_y^2\)&lt;/th>
&lt;th>\(E_{\rm numerical}\) (eV)&lt;/th>
&lt;th>\(E_{\rm analytical}\) (eV)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>1 + 1 = 2&lt;/td>
&lt;td>74.458&lt;/td>
&lt;td>75.206&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>4 + 1 = 5&lt;/td>
&lt;td>186.136&lt;/td>
&lt;td>187.961&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>1 + 4 = 5&lt;/td>
&lt;td>186.136&lt;/td>
&lt;td>187.961&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>4 + 4 = 8&lt;/td>
&lt;td>297.814&lt;/td>
&lt;td>300.737&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>9 + 1 = 10&lt;/td>
&lt;td>372.236&lt;/td>
&lt;td>375.922&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>1 + 9 = 10&lt;/td>
&lt;td>372.236&lt;/td>
&lt;td>375.922&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>9 + 4 = 13&lt;/td>
&lt;td>483.914&lt;/td>
&lt;td>488.698&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>4 + 9 = 13&lt;/td>
&lt;td>483.914&lt;/td>
&lt;td>488.698&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>解得的本征值相差还是不小的，但总体趋势是一致的。
解得波函数如下（限于篇幅原因只列举前四个）:
&lt;img src="http://ionizing.page/ox-hugo/2D-particle-in-a-box-eigvec.svg" alt="">&lt;/p>
&lt;p>根据波函数形状判断，它们与量子数的对应关系如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>\(\psi\)&lt;/th>
&lt;th>\(n_x\)&lt;/th>
&lt;th>\(n_y\)&lt;/th>
&lt;th>\(E\) (eV)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>74.458&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>186.136&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>186.136&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;td>297.814&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在归一化波函数后，求得振幅为 1.990 ，与 \(\dfrac{2}{a} = 2\) 相差无几。&lt;/p>
&lt;p>由此可见，使用 Kronecker Sum 构造的 Laplacian 解出的结果是正确的。&lt;/p>
&lt;h4 id="高维-hamiltonian-的构造与求解">高维 Hamiltonian 的构造与求解&lt;/h4>
&lt;p>已经有了高维的 Laplacian ，我们需要把势能项和 Laplacian 组合起来得到 Hamiltonian 。
显然，我们需要把势能加到对角项上，但要注意一个问题，就是 Laplacian 的对角项与格点的对应关系：&lt;/p>
&lt;p>\[
L = \bold{D}_\bold{xx} \otimes \bold{I} \otimes \bold{I} +
\bold{I} \otimes \bold{D}_\bold{yy} \otimes \bold{I} +
\bold{I} \otimes \bold{I} \otimes \bold{D}_\bold{zz}
\]&lt;/p>
&lt;p>我们不妨令 \(\bold{D}_\bold{xx}\) 为 \(\bold{X}\) ， \(\bold{D}_\bold{yy}\) 为 \(\bold{Y}\) ，
\(\bold{D}_\bold{zz}\) 为 \(\bold{Z}\)，
根据 Kronecker Product 的运算过程（详见 Wiki），最后得到的矩阵对角线应该是&lt;/p>
&lt;p>\[\begin{bmatrix}
\bold{X}_{11} \bold{Y}_{11} \bold{Z}_{11} &amp;amp; &amp;amp; &amp;amp; \newline
&amp;amp; \bold{X}_{11} \bold{Y}_{11} \bold{Z}_{22} &amp;amp; &amp;amp; \newline
&amp;amp; &amp;amp; \bold{X}_{11} \bold{Y}_{11} \bold{Z}_{33} &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; \ddots
\end{bmatrix}\]&lt;/p>
&lt;p>上式中 \(\bold{Z}\) 的对角线，即最后一个维度的下标增长得最快；对应地，在加和势能项时，
也应该是最后一个维度增长最快，这恰好是访问一个行主序的多维数组元素时的访问顺序。
也就是说我们只需要按照行主序的顺序把多维的势能数组展开为一维数组，然后加和到 Laplacian 上即可得到 Hamiltonain ：&lt;/p>
&lt;p>\[H = T +
\begin{bmatrix}
V_{111} &amp;amp; &amp;amp; &amp;amp; \newline
&amp;amp; V_{112} &amp;amp; &amp;amp; \newline
&amp;amp; &amp;amp; V_{113} &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; \ddots
\end{bmatrix}\]&lt;/p>
&lt;p>此处我们选取静态氢原子的电子为求解对象，它的 Shrodinger 方程是这个形式&lt;/p>
&lt;p>\[
-\frac{\hbar^2}{2m_e} \nabla^2 \psi - \frac{e^2}{4\pi \epsilon_0} \frac{1}{r} \psi = E\psi
\]&lt;/p>
&lt;p>下面是程序实现，注意 Julia 的数组是列主序，因此在组合 Hamiltonian 时需要转换；
除此之外受计算机性能和辣鸡 &lt;code>ARPACK&lt;/code> 的限制，这里每个维度只取 50 个点，每个维度各取 30Å 的长度。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="c">#!/usr/bin/env julia&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">LinearAlgebra&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">SparseArrays&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">Arpack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">WriteVTK&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c"># Auxiliary function&lt;/span>
&lt;span class="k">function&lt;/span> &lt;span class="n">mgrid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xs&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Iterators&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">product&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xs&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="kp">in&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">push!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ret&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">getindex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c"># Constants Part&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">3.8099821161548593&lt;/span> &lt;span class="c"># hbar^2 / (2*m_e) /(Å^2) / eV&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">k_c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">14.39964547842567&lt;/span> &lt;span class="c"># (e*e / (4 * np.pi * epsilon_0)) # measured in eV / Å&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1.0&lt;/span> &lt;span class="c"># mass of electron&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">xlen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">30.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">ylen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">xlen&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">zlen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">xlen&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">xlen&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c"># generate the grid&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">xlen&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">xlen&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">ylen&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ylen&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">zlen&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">zlen&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">nev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c"># Potential Part&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="n">gx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">gy&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">gz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mgrid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">function&lt;/span> &lt;span class="n">potential&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">gy&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">gz&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">::&lt;/span>&lt;span class="kt">AbstractArray&lt;/span>
&lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sqrt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gx&lt;/span>&lt;span class="o">.^&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">gy&lt;/span>&lt;span class="o">.^&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">gz&lt;/span>&lt;span class="o">.^&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="o">.&amp;lt;&lt;/span> &lt;span class="mf">0.0001&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="mf">0.0001&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">k_c&lt;/span> &lt;span class="o">./&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="n">V&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">potential&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">gy&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">gz&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">Vmin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">minimum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c"># Hamiltonian Part&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="c"># Kinetic part&lt;/span>
&lt;span class="n">Identity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sparse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="nb">I&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">T_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sparse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">2.0&lt;/span>&lt;span class="nb">I&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">T_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">diagind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">T_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">diagind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">T_&lt;/span> &lt;span class="o">.*=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">dx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">T&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kron&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">kron&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Identity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Identity&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="n">kron&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Identity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">kron&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Identity&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="n">kron&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Identity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">kron&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Identity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T_&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c"># Hamiltonian&lt;/span>
&lt;span class="n">H&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">deepcopy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">H&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">diagind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">H&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">.+=&lt;/span> &lt;span class="n">permutedims&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">])[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c"># Solve the equation Hψ = Eψ&lt;/span>
&lt;span class="nd">@time&lt;/span> &lt;span class="n">λ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ϕ&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">eigs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">H&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nev&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">nev&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">which&lt;/span>&lt;span class="o">=:&lt;/span>&lt;span class="n">LM&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sigma&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Vmin&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="nd">@show&lt;/span> &lt;span class="n">λ&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c"># Visualization Part&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c">################################################################################&lt;/span>
&lt;span class="n">vtk_grid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;HydrogenAtom&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="n">vtk&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="kp">in&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">nev&lt;/span>
&lt;span class="n">ϕ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">./=&lt;/span> &lt;span class="n">norm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ϕ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nd">@assert&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ϕ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.^&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="n">≈&lt;/span> &lt;span class="mf">1.0&lt;/span>
&lt;span class="n">vtk&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;phi_&lt;/span>&lt;span class="si">$i&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">reshape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ϕ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果与解析值对比&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>\(\lambda\)&lt;/th>
&lt;th>\(n\)&lt;/th>
&lt;th>\(E_{\rm numernical}\) (eV)&lt;/th>
&lt;th>\(E_{\rm analytical}\) (eV)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>-10.713&lt;/td>
&lt;td>-13.6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;td>-3.417&lt;/td>
&lt;td>-3.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>-3.417&lt;/td>
&lt;td>-3.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>2&lt;/td>
&lt;td>-3.417&lt;/td>
&lt;td>-3.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>2&lt;/td>
&lt;td>-3.031&lt;/td>
&lt;td>-3.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>3&lt;/td>
&lt;td>-1.515&lt;/td>
&lt;td>-1.51&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>3&lt;/td>
&lt;td>-1.515&lt;/td>
&lt;td>-1.51&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>3&lt;/td>
&lt;td>-1.515&lt;/td>
&lt;td>-1.51&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>3&lt;/td>
&lt;td>-1.474&lt;/td>
&lt;td>-1.51&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10&lt;/td>
&lt;td>3&lt;/td>
&lt;td>-1.474&lt;/td>
&lt;td>-1.51&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>本征值与解析值对应得并不好，尤其是基态的能量，与解析解相差了近 3eV ，这是因为 \(1s\) 态主要局域在原子核附近，而求数值解时每个维度只取了 50 个点，&lt;/p>
&lt;p>本征态如下（这里只取前五个态）：&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/3D-hydrogen-eigvec.png" />
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/3D-hydrogen-eigvec.png" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>它们分别对应氢原子的 \(1s\) 态、 \(2p_y\) 态、 \(2p_z\) 态、 \(2p_x\) 态和 \(2s\) 态，抛去过于粗糙的格点和不太准的本征值不谈，
它们的形状与实验上符合得还是很好的。&lt;/p>
&lt;p>以上结果可以证明 Hamiltonian 的构造是合理的。&lt;/p>
&lt;h2 id="有限元法">有限元法&lt;/h2>
&lt;p>&lt;strong>&lt;strong>注：本人刚刚接触 FEM ，这里只是简单谈谈有限元法，以能通过改示例跑通自己的问题为标准
，因此对它的各项论述十分粗浅且可能存在错误，欢迎专业人士指正。&lt;/strong>&lt;/strong>&lt;/p>
&lt;p>上面我们讨论了使用有限差分法求解 Schrodinger 方程的过程，除了有限差分法，
还有一种在 CAE 领域应用非常广泛的方法——有限元法，也能用来求解 Schrodinger 方程。
简单且不负责任地说，有限元与有限差分最大的区别在于有限元的元素是大小、形状均可变，
并且它可以随意调整求解空间的形状以及网格的形状、局部疏密等等，
这使得它可以对各种奇怪的体系进行求解。&lt;/p>
&lt;h3 id="定态-schrodinger-方程的变分弱解形式">定态 Schrodinger 方程的变分弱解形式&lt;/h3>
&lt;p>之前本文给出过定态 Schrodinger 方程&lt;/p>
&lt;p>\[
-\frac{\hbar^2}{2m}\nabla^2 \psi + V\psi = E\psi
\]&lt;/p>
&lt;p>它其实是偏微分方程的 Strong Form （强解形式），而在 FEM 领域中常常使用 Weak Form
（弱解形式）来描述一个偏微分方程。经过查阅资料，我找到的 Shrodinger 方程的弱解形式如下：&lt;/p>
&lt;p>\[\begin{aligned}
\frac{\hbar^2}{2m} \int_{\Omega} \left(
\frac{\partial u}{\partial x} \frac{\partial v}{\partial x} +
\frac{\partial u}{\partial y} \frac{\partial v}{\partial y} +
\frac{\partial u}{\partial z} \frac{\partial v}{\partial z}
\right) + \int_{\Omega} Vuv = \int_{\Omega} Euv
\end{aligned}\]&lt;/p>
&lt;p>上式中 \(u\) 是我们要求解的波函数， \(v\) 是测试函数， \(\Omega\) 是有限元空间。
看起来这个式子和 Schrodinger 方程的强解形式差不多，只是动能项前面没有负号了。
具体推导过程详见 &lt;a href="https://en.wikipedia.org/wiki/Weak%5Fformulation#Example%5F2:%5FPoisson's%5Fequation%20">Weak formulation of Poisson&amp;rsquo;s equation&lt;/a> &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>
或 &lt;a href="https://en.wikiversity.org/wiki/User:Tclamb/FEniCS#Quantum%5FHarmonic%5FOscillator">Weak formulation of quantum harmonic oscillator&lt;/a> &lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>。&lt;/p>
&lt;h3 id="程序实现及结果验证">程序实现及结果验证&lt;/h3>
&lt;p>有了弱解形式的 Schrodinger Equation 后就可以开始使用有限元法求解了，这里使用
&lt;a href="https://freefem.org">FreeFEM++&lt;/a> &lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup> 作为实现语言。&lt;/p>
&lt;p>使用 FreeFEM++ 求解本征值问题时主要有以下步骤：&lt;/p>
&lt;ol>
&lt;li>定义网格；&lt;/li>
&lt;li>定义有限元空间；&lt;/li>
&lt;li>定义需要解决的问题，即用代码表达弱解形式的偏微分方程；&lt;/li>
&lt;li>调用求解器求解；&lt;/li>
&lt;li>输出结果以及可视化结果等。&lt;/li>
&lt;/ol>
&lt;p>这里以求解氢原子为例，求解空间为 30Åx30Åx30Å 的正方体，边缘格点数为 40x40x40 ，使用 P1 有限元空间。
下面是代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">load &amp;#34;msh3&amp;#34;
load &amp;#34;iovtk&amp;#34;
int nn = 40;
real ka = 3.8099821161548593; // hbar^2 / 2m_e
real kc = 14.39964547842567; // e^2 / (4pi epsilon_0)
mesh3 Th = cube(nn, nn, nn, [30*x-15, 30*y-15, 30*z-15]);
plot(Th, wait=1);
fespace Vh(Th, P1);
cout &amp;lt;&amp;lt; &amp;#34;Th : nv = &amp;#34; &amp;lt;&amp;lt; Th.nv &amp;lt;&amp;lt; &amp;#34; nt = &amp;#34; &amp;lt;&amp;lt; Th.nt &amp;lt;&amp;lt; endl;
real sigma = -13;
macro Grad(u) [dx(u), dy(u), dz(u)] // EOM
varf a(u1, u2) = int3d(Th) (
Grad(u1)&amp;#39; * Grad(u2) * ka
- 1.0 / sqrt(x^2 + y^2 + z^2) * u1 * u2 * kc
- sigma * u1 * u2
)
//+ on(1, 2, 3, 4, 5, 6, u1=0.0) // boundary condition
;
varf b([u1], [u2]) = int3d(Th) ( u1 * u2 ) ;
matrix A = a(Vh, Vh);
matrix B = b(Vh, Vh);
int nev = 20;
real[int] ev(nev);
Vh[int] eV(nev);
int k = EigenValue(A, B, sym=true, sigma=sigma, value=ev, vector=eV, tol=1e-10);
k = min(k, nev);
for (int i=0; i&amp;lt;k; ++i) {
cout &amp;lt;&amp;lt; &amp;#34; ---- &amp;#34; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; ev[i] &amp;lt;&amp;lt; &amp;#34; == &amp;#34; &amp;lt;&amp;lt; endl;
plot(eV[i], cmm=&amp;#34;#&amp;#34; + i + &amp;#34; EigenValue=&amp;#34; + ev[i], wait=true);
savevtk(&amp;#34;Eigen_&amp;#34; + i + &amp;#34;.vtk&amp;#34;, Th, eV[i], dataname=&amp;#34;EigenValue=&amp;#34; + ev[i]);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>求得本征值如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>\(\lambda\)&lt;/th>
&lt;th>\(E_{\rm numerical}\) (eV)&lt;/th>
&lt;th>\(E_{\rm analytical}\) (eV)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>-10.390&lt;/td>
&lt;td>-13.6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>-3.163&lt;/td>
&lt;td>-3.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>-3.163&lt;/td>
&lt;td>-3.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>-2.980&lt;/td>
&lt;td>-3.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>-2.776&lt;/td>
&lt;td>-3.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>-1.475&lt;/td>
&lt;td>-1.5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>-1.475&lt;/td>
&lt;td>-1.5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>-1.444&lt;/td>
&lt;td>-1.5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>-1.444&lt;/td>
&lt;td>-1.5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10&lt;/td>
&lt;td>-1.423&lt;/td>
&lt;td>-1.5&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>可见在这个格点密度下它的精度还是不太高，有些态甚至还比不上有限差分法的精度。&lt;/p>
&lt;p>它们的本征态如下：&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/3D-hydrogen-eigenvec-FEM.png" />
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/3D-hydrogen-eigenvec-FEM.png" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>和有限差分法相比，它的本征态似乎更粗糙一些，实际上这是由于取的网格不够密，
以及势能项 \(1/r\) 在 0 处存在奇点难以近似导致的。&lt;/p>
&lt;p>尽管有这样的缺陷，但它胜在是一个成熟的开源软件，比之前随便写的 toy 要正式许多，
而且它还能使用其它设计软件来建模定义求解的空间，甚至读取其它软件生成的网格进行后续的计算，
最重要的一点，它可以集成并行的本征值求解器 SLEPc &lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup> 。
经过测试，求解一个 150x150x75 的网格时，在 32 核的服务器上可以用 18 分钟跑完，效率还是令人满意的。&lt;/p>
&lt;h2 id="总结及吐槽">总结及吐槽&lt;/h2>
&lt;p>总之，本文使用了两种不同的方法在实空间直接求解单电子的 Schrodinger 方程，
总体的结果还算满意。有限差分法的算法学习自 GithHub 的一个项目
&lt;a href="https://github.com/quantum-visualizations/qmsolve">qmsolve&lt;/a> &lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>，
作者甚至还把我拉到了这个项目的 Discord 讨论群（现在已经开放）继续讨论。&lt;/p>
&lt;h3 id="吐槽">吐槽&lt;/h3>
&lt;ol>
&lt;li>有限差分法的 Hamiltonian 矩阵大小随维度的升高而急剧升高，
如果一个问题能在较低的维度解决，不要使用更高的维度，通常情况后者解不动：
一维问题的 Hamiltonian 大小是 \(O(N^2)\) ，而三维问题的 Hamiltonian 大小是 \(O(N^6)\)
&lt;del>，如果后面有空的话我会考虑写一下柱坐标系内 Schrodinger 方程的求解&lt;/del> 。&lt;/li>
&lt;li>在使用有限差分法时格点越密，求解所需的时间越多，且耗时呈指数级增长。
为此我花了将近一周多的时间在寻找 Julia 能用的并行本征值求解器上，
最后发现没有能满足要求的，有几个 C++ / Python 能用的并行求解器，如 SLEPc 和 Trilinos ，但我没去尝试；&lt;/li>
&lt;li>&lt;code>Arpack&lt;/code> 在处理 60x60x60 的格点时就已经有点力不从心了，
超算上显示它只能通过调用 &lt;code>BLAS&lt;/code> 来实现部分的并行操作，且最多只有 6 个线程在跑，
而且 &lt;code>Arpack&lt;/code> 也确实很久没有更新了；&lt;/li>
&lt;li>&lt;code>scipy.sparse.eigsh&lt;/code> 的效率还不如 Julia 里的 &lt;code>Arpack.eigs&lt;/code> ，前者算 50x50x50
的体系就算不动了，而且似乎在超算上用并行也没什么加速效果，尽管所有核都是满载；&lt;/li>
&lt;li>FreeFEM++ 的语言乍一看挺像 C++ ，但其实区别还是相当大的，令人惊喜的是它的文档还有一个中文翻译版；&lt;/li>
&lt;li>在服务器上编译 FreeFEM++ 也花了我不少时间，这个东西的 Makefile 写得让人头疼：
&lt;code>configure&lt;/code> 文件直接就是一个 Python 脚本，而且层层套娃，想改什么参数都不好找，
那两天被弄得脑壳疼；&lt;/li>
&lt;li>FreeFEM++ 支持并行操作，用更密的 Mesh 可以重复出文献上的结果；更重要的是它可以更灵活地指定边界条件；&lt;/li>
&lt;li>在可视化 FreeFEM++ 的输出，即 vtk 文件时也遇到了不少麻烦，因为之前从没接触过 vtk 文件，
只是听说 ParaView&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup> 效果最好，于是从头开始学 ParaView 。
不得不说，入门时还是看视频学最快，找谷歌翻论坛很可能不知所云；&lt;/li>
&lt;li>实验组最后还要求用求得的波函数计算一下位置算符的期望值，于是我又不得不去翻 ParaView 的手册找怎么操作数据。
这个软件和 Python 以及 VTK 深度集成，里面自带一个 Python 解释器，
但没有提供内置对象的文档，导致你面对一个 Script 框时连输入是啥都不知道，
此外它的一些数据结构在原版 VTK 内还没有，那就只能靠 &lt;code>dir(obj)&lt;/code> 来看它的方法列表了，
通过不断地翻论坛（2018 年以前的论坛还是在邮件列表上），
还是在一个人的回答中找到了相关的信息，算是顺利解决了问题，不得不说这个过程还是挺恶心人的。&lt;/li>
&lt;/ol>
&lt;p>这些东西可能读起来几分钟就读完了，但从接到相关的任务，到给出令实验组满意的结果，
再到写出这篇博文，整整用掉了一个多月的时间，这期间试了尝试过很多次，
不管是有限差分还是有限元，写过很多测试的代码但结果不正确，身边又没有可以请教人时，
内心还是有一点绝望的（尤其在 6 月下半旬还夹着报账那个事），
中途想过放弃，想着不如直接找个力学系的同学抛给他用 COMSOL 解出来，
但最后还是通过翻论坛，厚着脸皮问 developer 等手段把想要的结果算出来了，
此时觉得前面的努力还是没有白费，就是对当初对实验组的老师打包票说几天就能算出来，
但实际花了近一个月这一点还是有点惭愧的。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Particle%5Fin%5Fa%5Fbox">https://en.wikipedia.org/wiki/Particle%5Fin%5Fa%5Fbox&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Finite%5Fdifference%5Fcoefficient">https://en.wikipedia.org/wiki/Finite%5Fdifference%5Fcoefficient&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://www.sciencedirect.com/science/article/pii/S0039602899006688">https://www.sciencedirect.com/science/article/pii/S0039602899006688&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Kronecker%5Fsum%5Fof%5Fdiscrete%5FLaplacians">https://en.wikipedia.org/wiki/Kronecker%5Fsum%5Fof%5Fdiscrete%5FLaplacians&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Weak%5Fformulation#Example%5F2:%5FPoisson's%5Fequation%20">https://en.wikipedia.org/wiki/Weak%5Fformulation#Example%5F2:%5FPoisson's%5Fequation%20&lt;/a> &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikiversity.org/wiki/User:Tclamb/FEniCS#Quantum%5FHarmonic%5FOscillator">https://en.wikiversity.org/wiki/User:Tclamb/FEniCS#Quantum%5FHarmonic%5FOscillator&lt;/a> &lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>&lt;a href="https://freefem.org">https://freefem.org&lt;/a> &lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>&lt;a href="https://slepc.upv.es">https://slepc.upv.es&lt;/a> &lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/quantum-visualizations/qmsolve">https://github.com/quantum-visualizations/qmsolve&lt;/a> &lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10" role="doc-endnote">
&lt;p>&lt;a href="https://www.paraview.org">https://www.paraview.org&lt;/a> &lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>镜像态的那些坑</title><link>http://ionizing.page/post/issues-with-ips/</link><pubDate>Thu, 06 May 2021 00:18:00 +0800</pubDate><guid>http://ionizing.page/post/issues-with-ips/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#%E8%A1%A8%E9%9D%A2%E6%80%81%E4%B8%8E%E9%95%9C%E5%83%8F%E6%80%81">表面态与镜像态&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E8%A1%A8%E9%9D%A2%E6%80%81--surface-states-ss">表面态(Surface States, SS)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%95%9C%E5%83%8F%E6%80%81--image-potential-states-ips">镜像态(Image Potential States, IPS)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B">计算过程&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E8%AE%A1%E7%AE%97%E5%8F%82%E6%95%B0">计算参数&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E8%B6%B3%E5%A4%9F%E7%9A%84%E7%A9%BA%E5%B8%A6">足够的空带&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%B6%B3%E5%A4%9F%E7%9A%84%E7%9C%9F%E7%A9%BA%E5%B1%82">足够的真空层&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%81%B6%E6%9E%81%E6%A0%A1%E6%AD%A3">偶极校正&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E9%AA%8C%E8%AF%81%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%9C">验证计算结果&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#pdos-%E6%B3%95">PDOS 法&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%AE%9E%E7%A9%BA%E9%97%B4%E5%88%86%E5%B8%83%E6%B3%95">实空间分布法&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%83%BD%E5%B8%A6%E6%B3%95">能带法&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E9%99%84%E5%BD%95">附录&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E9%95%9C%E5%83%8F%E5%8A%BF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%8E%A8%E5%AF%BC">镜像势表达式的推导&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>本文是帮实验组计算表面态与镜像态相关性质时所遇到一些坑的总结。&lt;/p>
&lt;blockquote>
&lt;p>限于 DFT 理论上的缺陷（使用指数函数逼近库仑势，从而加速收敛）， DFT 并不能算准
IPS 的能级（误差在 \(\pm 0.3eV\)左右），但有的实验又需要从 DFT 计算获得一些关于
IPS 的信息，于是即使 DFT 不能算准，也无大碍。在这个过程中本人似乎不止一次掉入坑
中，于是把这个过程记录下来，即便对后人没什么帮助，也算是对自己学习印迹的一丝收藏
吧。&lt;/p>
&lt;/blockquote>
&lt;h2 id="表面态与镜像态">表面态与镜像态&lt;/h2>
&lt;h3 id="表面态--surface-states-ss">表面态(Surface States, SS)&lt;/h3>
&lt;p>顾名思义，表面态就是在物体 &lt;strong>表面&lt;/strong> 附近存在的电子态&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。表面意味着边界的存在，
边界外是真空，边界内是原子。正因为存在从体相到真空的剧烈变化，表面的原子存在不饱和键，即悬挂键。这些悬挂键由那些在体相内本应成键的电子贡献，受这些电子影响，物体的 &lt;strong>表面&lt;/strong> 会出现一些新的、相对弥散的电子态，这些电子态被称为表面态。&lt;/p>
&lt;h3 id="镜像态--image-potential-states-ips">镜像态(Image Potential States, IPS)&lt;/h3>
&lt;p>将一个电荷放在无限大的导体表面（这里假设表面是平面），导体内部会发生极化，导致内部电荷重新分布，从而产生一个静电势。这个静电势等效于导体内一个带相反电性的镜像电荷产生的静电势，因而被称为镜像势。电子因镜像势会在导体表面 &lt;strong>外&lt;/strong> 形成一些相对弥散的态，这些态就是镜像态。&lt;/p>
&lt;link rel="stylesheet" href="http://ionizing.page/css/hugo-easy-gallery.css" />
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/ips1.svg" alt="Figure 1: 镜像电荷示意图， 0&amp;#43; 侧是真空， 0- 侧是相对介电常数为 epsilon\_r 的导体内部"/>
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/ips1.svg" itemprop="contentUrl">&lt;/a>
&lt;figcaption>
&lt;p>Figure 1: 镜像电荷示意图， 0&amp;#43; 侧是真空， 0- 侧是相对介电常数为 epsilon\_r 的导体内部&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;p>镜像势的势能曲线是反比例曲线：&lt;/p>
&lt;p>\[ V(z) = - \frac{\beta e^2}{4\pi \epsilon_{0} \cdot 4z} \]&lt;/p>
&lt;p>上式中 \(\beta = \displaystyle\frac{\epsilon_r-1}{\epsilon_r+1}\)&lt;/p>
&lt;p>所以电子满足方程：&lt;/p>
&lt;p>\[ \begin{aligned}
\frac{\hbar^2}{2m_e} \nabla^2 \Psi + V(z)\Psi &amp;amp;={} E\Psi \newline
\frac{\hbar^2}{2m_e} \nabla^2 \Psi - \frac{\beta e^2}{4\pi \epsilon_{0} \cdot 4z} \Psi &amp;amp;={} E\Psi
\end{aligned} \]&lt;/p>
&lt;p>这个方程看起来很眼熟，它十分类似于氢原子 Schrodinger 方程。由于这个电子只在
\(z\) 方向上受镜像电荷作用，因而在 \(xy\) 方向上是自由的，所以它能量可以通过求解一维氢原子 Schrodinger 方程得到：&lt;/p>
&lt;p>\[ E_n = -\frac{0.85}{n^2}\frac{(\epsilon_r-1)^2}{(\epsilon_r+1)^2} \quad \text{eV} \]&lt;/p>
&lt;p>其中 \(n\) 是主量子数，分子 0.85eV 正好是氢原子基态能量的 \(\dfrac{1}{4^2}\) 。
所以镜像态也可以根据主量子数的不同来区分出不同的能级。求解过程可以在一篇文章&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>中查到；镜像势的表达式的推导过程详见附录。&lt;/p>
&lt;p>严格地说，镜像态也是表面态的一种&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>。一般而言，镜像态在真空能级以下 1eV 以内，
DFT 算出的 IPS 能级可能会超过真空能级，但在实际上是不太可能的，即使真的有，实验上也不大能测得到。&lt;/p>
&lt;h2 id="计算过程">计算过程&lt;/h2>
&lt;p>事实上计算出镜像态，并不需要改太多的东西。下面在介绍如何设置计算参数的同时以
Ag(111) 上吸附苯分子为例阐述如何从结果中分析是否存在 IPS 。&lt;/p>
&lt;h3 id="计算参数">计算参数&lt;/h3>
&lt;p>这里使用的晶格是 Ag(111) 的 \(3\times3\) 表面，上表面放置了一个苯分子，结构如图：&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/AgBenzene-structure.png" alt="Figure 2: Benzene on Ag(111)"/>
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/AgBenzene-structure.png" itemprop="contentUrl">&lt;/a>
&lt;figcaption>
&lt;p>Figure 2: Benzene on Ag(111)&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;h4 id="足够的空带">足够的空带&lt;/h4>
&lt;p>如果体系比较小， VASP 默认取的 &lt;code>NBANDS&lt;/code> 是足够找到 IPS 的；但当体系特别大的时候，
默认的 &lt;code>NBANDS&lt;/code> 可能不太会覆盖到 IPS ，这时需要增加 &lt;code>NBANDS&lt;/code> ，一般加到真空能级以上 3eV 就足够了，实际上这里只是需要 VASP 能较为 &lt;em>精确&lt;/em> 地算对真空能级附近的态，
而标号接近 NBANDS 的能带不准确，表现在能带图上就是色散关系就像被生生截断了一样，
且呈锯齿状；此外，如果在实空间展开这个态会发现这个它像是随机生成的一样，没用使用价值分布。关于真空能级怎么算，详见之前的博文。&lt;/p>
&lt;p>这里使用的体系里因为原子数比较适中，不用额外增加 &lt;code>NBANDS&lt;/code> 。&lt;/p>
&lt;h4 id="足够的真空层">足够的真空层&lt;/h4>
&lt;p>镜像态在真空层中，因此需要足够的真空层来容纳它，一般而言 30A 真空层可能还不算够。
但要注意 VASP 在算高度超过 70A 的晶格时会很难收敛。&lt;/p>
&lt;p>这里使用的体系加了 50A 的真空层，已经足够放下上表面的 IPS 。&lt;/p>
&lt;h4 id="偶极校正">偶极校正&lt;/h4>
&lt;p>如果 Slab 表面没有吸附其它原子/分子，则不必对体系进行偶极校正，否则需要校正，具体过程参见之前的博文。&lt;/p>
&lt;p>偶极校正效果如图：&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/AgBenzene-workfunc.png" alt="Figure 3: Benzene on Ag111 偶极校正后功函数图像"/>
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/AgBenzene-workfunc.png" itemprop="contentUrl">&lt;/a>
&lt;figcaption>
&lt;p>Figure 3: Benzene on Ag111 偶极校正后功函数图像&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;h3 id="验证计算结果">验证计算结果&lt;/h3>
&lt;p>这里的「验证」与其说是验证，不如说是寻找。前面提到， IPS 是一种相对「弥散」的态，
它「弥散」的性质决定了怎么去 Identify IPS 。这里总结了几种「找」 IPS 的方法。&lt;/p>
&lt;h4 id="pdos-法">PDOS 法&lt;/h4>
&lt;p>一个态比较「弥散」说明它的局域性（locality）比较低，反映在物理图像里就是它投影在原子上的态比较少。因此我们可以在通过不同能带在原子上的投影大小来判断它是否是 IPS。&lt;/p>
&lt;p>幸运地是 VASP 可以通过 &lt;code>LORBIT = .TRUE.&lt;/code> 来输出 &lt;code>PROCAR&lt;/code> 文件，它包含了每个能带在所有原子上的投影大小，顺便说一句， &lt;code>PROCAR&lt;/code> 还包含不同角动量的投影大小。&lt;/p>
&lt;p>先结构弛豫，再进行自恰计算得到 &lt;code>PROCAR&lt;/code> 后，可以通过以下方法查看这个态在所有原子上的投影之和：&lt;/p>
&lt;p>打开 &lt;code>PROCAR&lt;/code> ，定位到真空能级 &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> 附近 \(\Gamma\) 点的能带&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">band 35 # energy 3.23957699 # occ. 0.00000000
ion s py pz px dxy dyz dz2 dxz x2-y2 tot
1 0.002 0.000 0.000 0.000 0.000 0.000 0.002 0.000 0.000 0.004
2 0.001 0.000 0.001 0.000 0.000 0.000 0.000 0.000 0.000 0.002
......
tot 0.005 0.000 0.004 0.000 0.000 0.000 0.004 0.000 0.000 0.013
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看最后一行 &lt;code>tot 0.005 ...&lt;/code> ，最右边也有一个 &lt;code>tot&lt;/code> ，两者交叉的的值 &lt;code>0.013&lt;/code> 即为这条能带在整个系统上的投影大小，换言之，局域度的大小。那么这个值越小则它是 IPS
的可能性越高。比如上面的能带 PDOS 中整体的 PDOS 之和只有 0.013 ，说明它的局域度很小，那么这个态非常弥散，有可能是 IPS 。&lt;/p>
&lt;h4 id="实空间分布法">实空间分布法&lt;/h4>
&lt;p>仅仅是通过能带的 PDOS 还不足以确认这条带是不是 IPS ，有些费米能级附近的带总体
PDOS 也很小，但不是 IPS 。这时就需要其它方法来看了，比如本节要介绍的实空间分布法。&lt;/p>
&lt;p>IPS 在实空间的分布特征相当明显：&lt;/p>
&lt;ol>
&lt;li>它们在表面以外，并且随着主量子数的升高有着对应个数的波包；&lt;/li>
&lt;li>每个波包对应的空间分布呈明显的近自由电子态的特征。&lt;/li>
&lt;/ol>
&lt;p>如下图&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>所示：&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/ips_ref1.jpg" alt="Figure 4: IPS 的实空间分布曲线，最下面的曲线是镜像势的曲线。"/>
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/ips_ref1.jpg" itemprop="contentUrl">&lt;/a>
&lt;figcaption>
&lt;p>Figure 4: IPS 的实空间分布曲线，最下面的曲线是镜像势的曲线。&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;p>上面图中 \(n=1\) 的 IPS 只有一个波包， \(n=2\) 时有两个波包， \(n=3\) 时有三个，
以此类推下去……&lt;/p>
&lt;p>对于第一个特征，我们可以对波函数的模平方作 \(z\) 方向上的分布，数出表面外有多少个峰，注意区分 Slab 的上表面和下表面，只有上表面的波包应该被计入在内。&lt;/p>
&lt;p>在 Benzene on Ag(111) 体系中，对应的 IPS 实空间分布曲线如下：&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/AgBenzene-ips1.png" alt="Figure 5: Benzene on Ag(111) 表面 IPS 的实空间分布曲线"/>
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/AgBenzene-ips1.png" itemprop="contentUrl">&lt;/a>
&lt;figcaption>
&lt;p>Figure 5: Benzene on Ag(111) 表面 IPS 的实空间分布曲线&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;p>如果只看 \(z\) 方向上的波函数觉得不放心，可以把某条带在实空间的分布画出来，如果它在真空中，并且上下表面近似为平面，即在水平方向上为近自由电子，也就可认为它是
IPS ，如下图所示：&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/AgBenzene-ipsrealspace.png" alt="Figure 6: Benzene on Ag(111) 体系 IPS 的实空间分布，这里每张图的等值面 Level 不同，以体现出对应数量的波包"/>
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/AgBenzene-ipsrealspace.png" itemprop="contentUrl">&lt;/a>
&lt;figcaption>
&lt;p>Figure 6: Benzene on Ag(111) 体系 IPS 的实空间分布，这里每张图的等值面 Level 不同，以体现出对应数量的波包&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;p>实际上，图上所标 \(n=4\) 的曲线并不真的是 IPS ，它的能量在真空能级以上，并且它的能量也不符合 \(\dfrac{1}{n^2}\) 的规律。如果仔细验证的话， \(n=1,2,3\) 的能量也并不符合这个规律，这就是 DFT 理论的局限所致，想要再算得更准，需要更大的代价。&lt;/p>
&lt;h4 id="能带法">能带法&lt;/h4>
&lt;p>以上是在单点能静态计算的基础上进行的分析，如果已经画出了这个体系的能带图，从能带图上可以更加清晰地反映出 IPS 的特征。&lt;/p>
&lt;p>能带图的横坐标量纲是动量，纵坐标是能量。一个自由电子的能量全部由动能贡献，因此它的能量与动量的关系就是&lt;/p>
&lt;p>\[ E = E_k = \frac{p^2}{2m} = \frac{g^2}{2m_e} \]&lt;/p>
&lt;p>\(E\) 与 \(g\) 呈二次函数式色散关系，那么只要某个带的色散关系与抛物线相似，就有理由认为某能带可能是 IPS ，比如下面的图中 4 eV 附近 \(\Gamma\) 点的能带明显呈抛物线色散关系，而它们也确实算是 IPS 。&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/AgBenzene-band.png" />
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/AgBenzene-band.png" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>如果更有耐心的话，可以算一下那几条带的相对有效质量，如果接近 1 ，就可以很明确地说明这几条带是 IPS ，可惜本人不太想再算这个（实际就是懒），这个就算作「读者自证不难」吧2333。&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="镜像势表达式的推导">镜像势表达式的推导&lt;/h3>
&lt;p>这里更一般地推导一下两种介质界面处镜像势的表达式，过程参考自&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>。&lt;/p>
&lt;p>假设有两种介质 1 和 2，它们的介电常数分别为 \(\epsilon_1\) 和 \(\epsilon_2\) ，有电荷
\(q\) 在介质 1 中，如下图所示：&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/ips2.svg" />
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/ips2.svg" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>现在将问题分成两部分来看：分别计算介质 1 和介质 2 中电场强度。&lt;/p>
&lt;p>在介质 1 中任取一点 \(P\) ，同时认为 \(q\) 的镜像电荷等效带电量为 \(q'\) ，则
\(P\) 点的受力如下图所示&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/ips3.svg" />
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/ips3.svg" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>此处的电场强度为&lt;/p>
&lt;p>\[\begin{aligned}
V_1 &amp;amp;={} \frac{1}{4\pi \epsilon_1} \left( \frac{q}{R_1} + \frac{q'}{R_2} \right) \newline
R_1 &amp;amp;={} \sqrt{(z-d)^2 + r^2} \newline
R_2 &amp;amp;={} \sqrt{(z+d)^2 + r^2} \newline
E_z &amp;amp;={} -\frac{\partial V_1}{\partial z} = \frac{1}{4\pi\epsilon_1}
\left[ \frac{q(z-d)}{R_1^3} + \frac{q'(z-d)}{R_2^3} \right] \newline
E_r &amp;amp;={} -\frac{\partial V_1}{\partial r} = \frac{1}{4\pi\epsilon_1}
\left[ \frac{qr}{R_1^3} + \frac{q' r}{R_2^3} \right] \newline
\end{aligned}\]&lt;/p>
&lt;p>现在考虑介质 2 中的电场强度，由于经过一个介面，介电常数分布发生了改变，所以在介质 2 中所感受到的原来电荷的等效电荷为 \(q''\) 。&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/ips4.svg" />
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/ips4.svg" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>P 点的电场强度可以计算出来：&lt;/p>
&lt;p>\[\begin{aligned}
V_2 &amp;amp;={} \frac{1}{4\pi\epsilon_2} \frac{q''}{R_3} \newline
R_3 &amp;amp;={} \sqrt{(z-d)^2 + r^2} \newline
E_z^{(2)} &amp;amp;={} -\frac{\partial V_2}{\partial z} =
\frac{1}{4\pi\epsilon_2} \frac{q'' (z-d)}{R_3^3} \newline
E_r^{(2)} &amp;amp;={} -\frac{\partial V_2}{\partial r} =
\frac{1}{4\pi\epsilon_2} \frac{q'' r}{R_3^3} \newline
\end{aligned}\]&lt;/p>
&lt;p>在界面处应用导体介质界面上的边界条件：&lt;/p>
&lt;p>\[\begin{cases}
z = 0 \implies R_1 = R_2 = R_3 = R \newline
D_z^{(1)} = D_z^{(2)} \newline
E_r^{(1)} = E_r^{(2)} \newline
\end{cases}\]&lt;/p>
&lt;p>即：&lt;/p>
&lt;p>\[\begin{aligned}
\epsilon_1 E_z^{(1)} &amp;amp; = {} \epsilon_2 E_z^{(2)} \newline
\implies \epsilon_1 \frac{1}{4\pi\epsilon_1} \frac{(q-q')d}{R^3} &amp;amp; = {}
\epsilon_2 \frac{1}{4\pi\epsilon_2} \frac{q'' d}{R^3} \newline
\implies q - q' &amp;amp;={} q''
\end{aligned}\]&lt;/p>
&lt;p>\[\begin{aligned}
E_r^{(1)} &amp;amp;={} E_r^{(2)} \newline
\implies \frac{1}{4\pi\epsilon_1} \frac{(q+q')r}{R^3} &amp;amp;={}
\frac{1}{4\pi\epsilon_2} \frac{q'' r}{R^2} \newline
\implies \frac{q+q'}{\epsilon_1} &amp;amp;={} \frac{q''}{\epsilon_2}
\end{aligned}\]&lt;/p>
&lt;p>联立上面两式，可以得到&lt;/p>
&lt;p>\[ q' = -\frac{\epsilon_2 - \epsilon_1}{\epsilon_2 + \epsilon_1} q \]&lt;/p>
&lt;p>如果用相对介电常数 \(\epsilon_r = \dfrac{\epsilon_2}{\epsilon_1}\) ，上面式子还能简化为&lt;/p>
&lt;p>\[ q' = -\frac{\epsilon_r - 1}{\epsilon_r + 1} q = -\beta q \]&lt;/p>
&lt;p>这就是前文中镜像电荷表达式中 \(\beta\) 的来源。可以看出，如果 \(\epsilon_r &amp;lt; 1\)
，镜像电荷的符号与原来电荷相同。&lt;/p>
&lt;p>电荷 \(q\) 的受力以及势能表达式：&lt;/p>
&lt;p>\[\begin{aligned}
F(z) &amp;amp;={} -\frac{\beta q^2}{4\pi \epsilon_0 (2z)^2} \quad \beta = \frac{\epsilon_r-1}{\epsilon_r+1} \newline
V(z) &amp;amp;={} -\frac{\beta q^2}{4\pi \epsilon_r \cdot 4z}
\end{aligned}\]&lt;/p>
&lt;p>文中第一节的表达式得证。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Wikipedia Surface States item &lt;a href="https://en.wikipedia.org/wiki/Surface%5Fstates">https://en.wikipedia.org/wiki/Surface%5Fstates&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>One-dimensional hydrogen atom &lt;a href="https://royalsocietypublishing.org/doi/10.1098/rspa.2015.0534">https://royalsocietypublishing.org/doi/10.1098/rspa.2015.0534&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Image potential surface states &lt;a href="https://iopscience.iop.org/article/10.1088/0031-8949/36/4/009/pdf">https://iopscience.iop.org/article/10.1088/0031-8949/36/4/009/pdf&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>真空能级可以在 &lt;code>OUTCAR&lt;/code> 里找到（ &lt;code>grep vacuum OUTCAR&lt;/code> ） &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>图片来自 Image-potential-induced states at metal surfaces &lt;a href="https://www.sciencedirect.com/science/article/pii/S0368204802001500">https://www.sciencedirect.com/science/article/pii/S0368204802001500&lt;/a> &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>Classical Electrodynamics, From Image Charges to the Photon Mass and Magnetic monopoles, Francesco Lacava &lt;a href="https://www.springer.com/gp/book/9783319394732">https://www.springer.com/gp/book/9783319394732&lt;/a> &lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>VASP 偶极校正及功函数的计算</title><link>http://ionizing.page/post/vasp-dipol-correction-work-function/</link><pubDate>Fri, 23 Apr 2021 16:44:00 +0800</pubDate><guid>http://ionizing.page/post/vasp-dipol-correction-work-function/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#%E6%A6%82%E5%BF%B5%E8%A7%A3%E9%87%8A">概念解释&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%8A%9F%E5%87%BD%E6%95%B0">功函数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%9C%9F%E7%A9%BA%E8%83%BD%E7%BA%A7">真空能级&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%81%B6%E6%9E%81%E6%A0%A1%E6%AD%A3">偶极校正&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97">如何计算&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%81%B6%E6%9E%81%E6%A0%A1%E6%AD%A3">偶极校正&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8A%9F%E5%87%BD%E6%95%B0">功函数&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E7%9C%9F%E7%A9%BA%E8%83%BD%E7%BA%A7">真空能级&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>水文一篇，介绍了如何用 VASP 添加偶极校正参数、计算 Slab 体系的功函数，以及如何找真空能级。&lt;/p>
&lt;h2 id="概念解释">概念解释&lt;/h2>
&lt;h3 id="功函数">功函数&lt;/h3>
&lt;p>将一个固体内部的电子移动到真空所需的能量。（类似于光电效应方程中的逸出功）。&lt;/p>
&lt;h3 id="真空能级">真空能级&lt;/h3>
&lt;p>固体表面外真空中自由电子所具有的能量。换句话说，电子跑出固体表面并达到这个能级后即可认为它自由 &lt;del>免费&lt;/del> 了。&lt;/p>
&lt;h3 id="偶极校正">偶极校正&lt;/h3>
&lt;p>因 VASP 所适用的体系是周期性体系，使用它来模拟实验中的 Slab 模型时会取一个相当大的真空层来隔绝相信两个周期中 Slab 的相互作用。理想情况下，真空层中的功函数应当是一条水平的直线（函数值为定值）。但如果表面的两侧并非对称，即其中一侧吸附了分子时，
这两侧的功函数存在差异，此时如果不进行偶极校正，真空中的功函数会是一条斜线；而经过偶极校正后，功函数会出现一个阶梯，阶梯两侧附近的曲接近水平。下图&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>是一个例子。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;link rel="stylesheet" href="http://ionizing.page/css/hugo-easy-gallery.css" />
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/VCL-2.png" alt="Figure 1: DFT 曲线为未经过偶极校正的功函数， DFT-DC 曲线是经过偶极校正后的功函数"/>
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/VCL-2.png" itemprop="contentUrl">&lt;/a>
&lt;figcaption>
&lt;p>Figure 1: DFT 曲线为未经过偶极校正的功函数， DFT-DC 曲线是经过偶极校正后的功函数&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;h2 id="如何计算">如何计算&lt;/h2>
&lt;h3 id="偶极校正">偶极校正&lt;/h3>
&lt;p>VASP 中直接使用 &lt;code>LDIPOL&lt;/code> 和 &lt;code>IDPOL&lt;/code> 即可开启它的偶极校正功能。&lt;/p>
&lt;ul>
&lt;li>&lt;code>LDIPOL = .TRUE.&lt;/code> 表示打开偶极校正；&lt;/li>
&lt;li>&lt;code>IDIPOL = 3&lt;/code> 表示偶极校正所修正的方向为第 3 个晶格矢量方向对应的方向，一般来说就是 \(z\) 轴；&lt;/li>
&lt;li>&lt;code>DIPOL = &amp;lt;3 float values&amp;gt;&lt;/code> 表示体系的中心，以分数坐标表示；&lt;/li>
&lt;/ul>
&lt;p>上面几个 Flag 中一般来说 DIPOL 不用填，因为 VASP 手册中&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>有一句&lt;/p>
&lt;blockquote>
&lt;p>If the flag is not set, VASP determines, where the charge density averaged over
one plane drops to a minimum and calculates the center of the charge
distribution by adding half of the lattice vector perpendicular to the plane
where the charge density has a minimum (this is a rather reliable approach for
orthorhombic cells).&lt;/p>
&lt;/blockquote>
&lt;p>不过有时不填它会导致体系 &lt;strong>非常&lt;/strong> 难以收敛，如果遇到这各情况，最好还是手动算一下所有原子 \(z\) 坐标的平均值，然后 &lt;code>DIPOL = 0.5 0.5 &amp;lt;averaged z&amp;gt;&lt;/code> ，此时修正效果可能并不好，读者需要：&lt;/p>
&lt;ol>
&lt;li>打开偶极校正和 &lt;code>DIPOL = 0.5 0.5 &amp;lt;averaged z&amp;gt;&lt;/code> ，并弛豫结构到稳定；&lt;/li>
&lt;li>关闭 &lt;code>DIPOL&lt;/code> ，并弛豫到结构稳定；&lt;/li>
&lt;li>关闭 &lt;code>DIPOL&lt;/code> ，打开 &lt;code>LVHAR = .TRUE.&lt;/code> ，并做静态计算，得到功函数；&lt;/li>
&lt;/ol>
&lt;p>偶极校正的标准是功函数出现台阶，并且台阶两边为水平，如果画出的功函数图不是这样，
就要考虑调整参数了。&lt;/p>
&lt;h3 id="功函数">功函数&lt;/h3>
&lt;p>在 VASP 中 &lt;code>LVHAR&lt;/code> &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>参数可以使 VASP 输出体系的功函数文件 &lt;code>LOCPOT&lt;/code> 。LOCPOT
文件本身是 Volumetric data ，它的格式与 CHGCAR 一样&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>。一般而言，用户关心的功函数是垂直于表面方向上的数据，因此在得到 LOCPOT 后需要对它做一点工作，即对 \(xy\)
平面内的数据做平均，然后乘以晶胞的体积，就得到我们需要的功函数信息。这里给出一个脚本&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>来完成这项工作：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">locpot_mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fname&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LOCPOT&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">axis&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">savefile&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;locpot.dat&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">outcar&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;OUTCAR&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="s1"> Reads the LOCPOT file and calculate the average potential along `axis`.
&lt;/span>&lt;span class="s1"> @in: See function argument.
&lt;/span>&lt;span class="s1"> @out:
&lt;/span>&lt;span class="s1"> - xvals: grid data along selected axis;
&lt;/span>&lt;span class="s1"> - mean: averaged potential corresponding to `xvals`.
&lt;/span>&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_efermi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outcar&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;OUTCAR&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isfile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outcar&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">warning&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;OUTCAR file not found. E-fermi set to 0.0eV&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">None&lt;/span>
&lt;span class="n">txt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outcar&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">efermi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">r&lt;/span>&lt;span class="s1">&amp;#39;E-fermi :\s*([-+]?[0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?)&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">txt&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">groups&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Found E-fermi = {}&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">efermi&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">efermi&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Loading LOCPOT file {}&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fname&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">locd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">VaspChargeDensity&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fname&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cell&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">locd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">atoms&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cell&lt;/span>
&lt;span class="n">latlens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">linalg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">norm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cell&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">axis&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">vol&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">linalg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">det&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cell&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">iaxis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;x&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">axis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">axes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">axes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">iaxis&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">axes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">tuple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">axes&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">locpot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">locd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">chg&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># must multiply with cell volume, similar to CHGCAR&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Calculating workfunction along {} axis&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">axis&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">mean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">locpot&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">axes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">vol&lt;/span>
&lt;span class="n">xvals&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">linspace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">latlens&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">iaxis&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">locpot&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">iaxis&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="c1"># save to &amp;#39;locpot.dat&amp;#39;&lt;/span>
&lt;span class="n">efermi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_efermi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outcar&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Saving raw data to {}&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">savefile&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">efermi&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="bp">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">savetxt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">savefile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">c_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">xvals&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mean&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="n">fmt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">%13.5f&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">header&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;Distance(A) Potential(eV) # E-fermi not corrected&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">mean&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">efermi&lt;/span>
&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">savetxt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">savefile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">c_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">xvals&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mean&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="n">fmt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">%13.5f&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">header&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;Distance(A) Potential(eV) # E-fermi shifted to 0.0eV&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完整的脚本文件已经放 Gist&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> 上，当然你也可以直接点击&lt;a href="vasp-dipol-correction-work-function/plot-workfunc.py">它&lt;/a>来下载。运行这个脚本后得到的 Workfunction.pdf 和 locpot.dat 就是 \(z\) 方向上的功函数信息。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/Workfunction.png" alt="Figure 2: Workfunction.png 示例"/>
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/Workfunction.png" itemprop="contentUrl">&lt;/a>
&lt;figcaption>
&lt;p>Figure 2: Workfunction.png 示例&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;h2 id="真空能级">真空能级&lt;/h2>
&lt;p>前面已经提到，真空能级可以读取 locpot.dat 真空部分的数据得到，其实当你打开
&lt;code>LVHAR&lt;/code> 时，它也可以通过读取 OUTCAR 得到，比如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">$ grep vacuum OUTCAR
vacuum level on the upper side and lower side of the slab 2.807 3.188
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的 upper side vacuum level 是指 Slab 上表面的真空能级（图 &lt;a href="#org755ef8c">2&lt;/a>
中 30A 处的平台）， lower side vacuum level 自然就是下表面的真空能级了
（图 &lt;a href="#org755ef8c">2&lt;/a> 中 35A 处的平台）。&lt;/p>
&lt;p>需要注意的是，从 OUTCAR 中 grep 出的真空能级没有经过费米能级修正，它需要减去
OUTCAR 中的 E-fermi 才是实验中测得的功函数的值。所幸的是 plot-workfunc.py 已经做了这个工作，用 locpot.dat 画出来的图就对应实验所测结果。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>图源： &lt;a href="http://exciting-code.org/nitrogen-dipole-correction">http://exciting-code.org/nitrogen-dipole-correction&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://www.vasp.at/wiki/index.php/DIPOL">https://www.vasp.at/wiki/index.php/DIPOL&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>在 VASP 5.2.12 之前的版本中 &lt;code>LVTOT&lt;/code> 输出的文件是静电势的贡献；但在 VASP 5.2.12 及之后的版本中，交换关联势的贡献也会被写入 &lt;code>LOCPOT&lt;/code> 中， &lt;code>LVHAR&lt;/code> 输出的部 分才是真正静电势的贡献，也就是我们想要的部分； &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>CHGCAR 的格式请见 VASP 手册 &lt;a href="https://www.vasp.at/wiki/index.php/CHGCAR">https://www.vasp.at/wiki/index.php/CHGCAR&lt;/a> ； &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>完整脚本见 &lt;a href="https://gist.github.com/Ionizing/1ac92f98e8b00a1cf6f16bd57694ff03">https://gist.github.com/Ionizing/1ac92f98e8b00a1cf6f16bd57694ff03&lt;/a> 。 &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>VASP 收敛性测试的小脚本</title><link>http://ionizing.page/post/vasp-convergence-test-scripts/</link><pubDate>Fri, 16 Apr 2021 20:57:00 +0800</pubDate><guid>http://ionizing.page/post/vasp-convergence-test-scripts/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#sigma-%E7%9A%84%E6%B5%8B%E8%AF%95">&lt;code>SIGMA&lt;/code> 的测试&lt;/a>&lt;/li>
&lt;li>&lt;a href="#encut-%E7%9A%84%E6%B5%8B%E8%AF%95">&lt;code>ENCUT&lt;/code> 的测试&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%99%B6%E6%A0%BC%E5%8F%82%E6%95%B0%E7%9A%84%E6%B5%8B%E8%AF%95">晶格参数的测试&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E6%99%B6%E6%A0%BC%E5%B8%B8%E6%95%B0%E7%9A%84%E6%B5%8B%E8%AF%95">晶格常数的测试&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%99%B6%E6%A0%BC%E9%95%BF%E5%BA%A6%E7%9A%84%E6%B5%8B%E8%AF%95">晶格长度的测试&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#slab-%E8%A1%AC%E5%BA%95%E5%B1%82%E6%95%B0%E7%9A%84%E6%B5%8B%E8%AF%95">Slab 衬底层数的测试&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>一般而言，在使用 VASP 计算体系之前都需要对一些参数做收敛性测试，侯老师&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>
曾写过一本VASP 入门手册，里面给了一些测试计算参数的小脚本，这里我也给出一些我经常用的收敛性测试脚本，权当抛砖引玉了。&lt;/p>
&lt;p>本文提供的测试脚本可以写进提交任务的脚本中，进而充分利用超算上多核、多节点的计算资源。需要注意的是，这些脚本本身并不产生 VASP 的输入文件，而是在已有的文件基础上进行修改。&lt;/p>
&lt;h2 id="sigma-的测试">&lt;code>SIGMA&lt;/code> 的测试&lt;/h2>
&lt;p>和上面的使用前提一样， INCAR 应提前准备好。 SIGMA 收敛的标准通常是 dE 绝对值小于
1.0meV/atom 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="c1">#SBATCH xx&lt;/span>
...
&lt;span class="nb">set&lt;/span> -e
&lt;span class="nb">set&lt;/span> -o pipefail
&lt;span class="nv">VASP_EXEC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;srun /path/to/vasp&amp;#34;&lt;/span> &lt;span class="c1"># &amp;#34;mpirun -np xxx&amp;#34; is also ok&lt;/span>
date &amp;gt;&amp;gt; sigma.txt
&lt;span class="k">for&lt;/span> i in 0.8 0.5 0.3 0.1 0.08 0.05 &lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span>
sed -i &lt;span class="s2">&amp;#34;s/^.*\\bSIGMA\\b.*&lt;/span>$&lt;span class="s2">/ SIGMA = &lt;/span>&lt;span class="nv">$i&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> INCAR
&lt;span class="nb">eval&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">VASP_EXEC&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="nv">TS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>grep &lt;span class="s2">&amp;#34;EENTRO&amp;#34;&lt;/span> OUTCAR &lt;span class="p">|&lt;/span> tail -1 &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $5}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$i&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="nv">$TS&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &amp;gt;&amp;gt; sigma.txt
&lt;span class="k">done&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;NIONS = &amp;#34;&lt;/span> &lt;span class="k">$(&lt;/span>grep NIONS OUTCAR &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $12}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span> &amp;gt;&amp;gt; sigma.txt
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="encut-的测试">&lt;code>ENCUT&lt;/code> 的测试&lt;/h2>
&lt;p>使用前请先写好一个 INCAR ，并确保里面包含 &lt;code>ENCUT&lt;/code> 字段，且 &lt;code>ENCUT&lt;/code> 单独占一行
（否则同一行内的其它参数会被舍去）。通常而言，达到收敛的标志是相邻两次迭代的能量小于 1.0meV/atom 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="c1">#SBATCH xx&lt;/span>
...
&lt;span class="nb">set&lt;/span> -e
&lt;span class="nb">set&lt;/span> -o pipefail
&lt;span class="nv">VASP_EXEC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;srun /path/to/vasp&amp;#34;&lt;/span> &lt;span class="c1"># &amp;#34;mpirun -np xxx&amp;#34; is also ok&lt;/span>
date &amp;gt;&amp;gt; encut.txt
&lt;span class="k">for&lt;/span> i in &lt;span class="o">{&lt;/span>200..500..50&lt;span class="o">}&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
sed -i &lt;span class="s2">&amp;#34;s/^.*\\bENCUT\\b.*&lt;/span>$&lt;span class="s2">/ ENCUT = &lt;/span>&lt;span class="nv">$i&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> INCAR
&lt;span class="nb">eval&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">VASP_EXEC&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="nv">E&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>grep TOTEN OUTCAR &lt;span class="p">|&lt;/span> tail -1 &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{printf &amp;#34;%12.6f&amp;#34;, $5}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span> &lt;span class="c1"># Extract TOTEN from OUTCAR&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$i&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="nv">$E&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &amp;gt;&amp;gt; encut.txt
&lt;span class="k">done&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;NIONS = &amp;#34;&lt;/span> &lt;span class="k">$(&lt;/span>grep NIONS OUTCAR &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $12}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span> &amp;gt;&amp;gt; encut.txt
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="晶格参数的测试">晶格参数的测试&lt;/h2>
&lt;h3 id="晶格常数的测试">晶格常数的测试&lt;/h3>
&lt;p>执行这个测试需要准备好 POSCAR ，这个测试不依赖 ASE 等包，因为它实质上是在更改
POSCAR 第二行的 scale factor 。这个测试只是相对粗糙的测试，因此这里就直接在原位覆盖前一次的计算结果了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="c1">#SBATCH xx&lt;/span>
...
&lt;span class="nb">set&lt;/span> -e
&lt;span class="nb">set&lt;/span> -o pipefail
&lt;span class="nv">VASP_EXEC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;srun /path/to/vasp&amp;#34;&lt;/span> &lt;span class="c1"># &amp;#34;mpirun -np xxx&amp;#34; is also ok&lt;/span>
date &amp;gt;&amp;gt; a.txt
&lt;span class="k">for&lt;/span> i in &lt;span class="k">$(&lt;/span>seq 0.99 0.001 1.01&lt;span class="k">)&lt;/span>
&lt;span class="k">do&lt;/span>
sed -i &lt;span class="s2">&amp;#34;2c &lt;/span>&lt;span class="nv">$i&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> POSCAR
&lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;a = &lt;/span>&lt;span class="nv">$i&lt;/span>&lt;span class="s2"> angstrom&amp;#34;&lt;/span>
&lt;span class="nb">eval&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">VASP_EXEC&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="nv">E&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>grep &lt;span class="s2">&amp;#34;TOTEN&amp;#34;&lt;/span> OUTCAR &lt;span class="p">|&lt;/span> tail -1 &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{printf &amp;#34;%12.6f&amp;#34;, $5 }&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="nv">V&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>grep &lt;span class="s2">&amp;#34;volume&amp;#34;&lt;/span> OUTCAR &lt;span class="p">|&lt;/span> tail -1 &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{printf &amp;#34;%12.4f&amp;#34;, $5}&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;a = %6.3f Vol = %10.4f Energy = %18.10f\n&amp;#34;&lt;/span> &lt;span class="nv">$i&lt;/span> &lt;span class="nv">$V&lt;/span> &lt;span class="nv">$E&lt;/span> &amp;gt;&amp;gt; a.txt
tail -1 a.txt
&lt;span class="k">done&lt;/span>
&lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;\n\n&amp;#34;&lt;/span> &amp;gt;&amp;gt; a.txt#+end_src
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="晶格长度的测试">晶格长度的测试&lt;/h3>
&lt;p>在测试晶格的角度、长度时就不得不使用其它包了，Python 的 ASE 包提供了相对完善的基础设施，这里在使用它来辅助完成晶格测试的工作。另外，在测试 Slab 的真空层厚度时也可以使用这个脚本&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">ase.io&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">read&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">poscar_reader&lt;/span>
&lt;span class="n">poscar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">poscar_reader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;POSCAR&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cell&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">poscar&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_cell&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">copy&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">cell&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mf">5.0&lt;/span> &lt;span class="c1"># Increase length along z axis by 5 angstroms each time&lt;/span>
&lt;span class="n">poscar&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_cell&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cell&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">dirname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;{:02}&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dirname&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mkdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dirname&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># create directories for each test&lt;/span>
&lt;span class="n">poscar&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dirname&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;/POSCAR&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vasp5&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">direct&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">infile&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;INCAR&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;POTCAR&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;KPOINTS&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;sub_vasp_tahoma&amp;#39;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">abspath&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">abspath&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">infile&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">symlink&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">abspath&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dirname&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">infile&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;POSCAR saved in {}&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dirname&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;/POSCAR&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用户可以根据自己需要随意更改晶格的参数，具体的需求可以通过阅读 ASE 的文档&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>来实现，这里就不一一列举了。&lt;/p>
&lt;h2 id="slab-衬底层数的测试">Slab 衬底层数的测试&lt;/h2>
&lt;p>一般而言，结构建模都是在 Materials Studio 上完成的（我现在也是如此），但如果有对
Slab 衬底做收敛性测试的需求，还是要借助一下 ASE ，它也内置一了些常见的 Slab 。&lt;/p>
&lt;p>下面是一个生成不同层数 Ag(111) Slab 的脚本：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="kn">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">ase.build&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">fcc111&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">ase.constraints&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">FixAtoms&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">arange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">numstr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># generate 1x1 slab along a and b axis, this slab has `i` layers&lt;/span>
&lt;span class="c1"># vacuum is 20 angstrom&lt;/span>
&lt;span class="n">slab&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fcc111&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Ag&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">vacuum&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Relax the first 2 layers and fix the others.&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FixAtoms&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mask&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">atom&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">atom&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">slab&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="c1"># Apply the constraint&lt;/span>
&lt;span class="n">slab&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_constraint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">slab&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numstr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">makedirs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numstr&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;/opt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">makedirs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numstr&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;/band&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">slab&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numstr&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;/opt/POSCAR&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vasp5&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">direct&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于其它金属， ASE 也有支持，详细说明请看它的文档&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/orivenlikon/vaspDoc/blob/master/%5Bmuchong.com%5Dvasp%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-%E5%A4%8D%E6%97%A6-%E4%BE%AF%E6%9F%B1%E5%B3%B0.pdf">https://github.com/orivenlikon/vaspDoc/blob/master/%5Bmuchong.com%5Dvasp%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-%E5%A4%8D%E6%97%A6-%E4%BE%AF%E6%9F%B1%E5%B3%B0.pdf&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>这个脚本要求晶格的 c 轴垂直于 a 轴和 b 轴 &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://wiki.fysik.dtu.dk/ase/ase/atoms.html">https://wiki.fysik.dtu.dk/ase/ase/atoms.html&lt;/a> 和 &lt;a href="https://wiki.fysik.dtu.dk/ase/ase/geometry.html">https://wiki.fysik.dtu.dk/ase/ase/geometry.html&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>&lt;a href="https://wiki.fysik.dtu.dk/ase/ase/build/build.html">https://wiki.fysik.dtu.dk/ase/ase/build/build.html&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>记一次 Julia 代码性能优化过程</title><link>http://ionizing.page/post/a-try-on-julia-code-optimization/</link><pubDate>Fri, 16 Apr 2021 13:06:00 +0800</pubDate><guid>http://ionizing.page/post/a-try-on-julia-code-optimization/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83">运行环境&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BC%98%E5%8C%96%E8%BF%87%E7%A8%8B">优化过程&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%8E%9F%E5%A7%8B%E7%89%88%E6%9C%AC">原始版本&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BD%BF%E7%94%A8-c-ffi-%E7%9A%84-rgamma-%E4%B8%8E-rnorm">使用 C-ffi 的 &lt;code>rgamma&lt;/code> 与 &lt;code>rnorm&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8E%BB%E9%99%A4%E5%A4%96%E9%83%A8%E4%BE%9D%E8%B5%96">去除外部依赖&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%83%85%E5%86%B5%E5%88%86%E6%9E%90">内存分配情况分析&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8E%BB%E9%99%A4%E5%86%85%E5%B1%82%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D">去除内层循环的内存分配&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8E%BB%E9%99%A4%E5%A4%96%E5%B1%82%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D">去除外层循环的内存分配&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8A%A0%E9%80%9F">使用多线程加速&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%80%BB%E7%BB%93">总结&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>这是和某三爷讨论后对交流内容的整理。&lt;/p>
&lt;p>众所周知， Julia 是一种高级通用动态编程语言，它专为科学计算而生。为了方便科研人员使用，它的语法被设计得很像 MATLAB ，但比 MATLAB 更合理（譬如数组引用使用 &lt;code>[]&lt;/code>
，而不是 &lt;code>()&lt;/code> ）。作为一门很年轻的语言，它吸收了前辈们的很多优点，也有着自己的特色，但最受人青睐的一点在于：尽管它是一门动态语言，却宣称拥有 C/C++ 一般的性能。
一般而言，动态语言的表现能力更为出色，能用更少的代码做更多的事，开发效率高；而静态语言的编译器后端更容易优化，运行效率高。Julia 有动态性，开发效率毋庸置疑，一些测评也显示 Julia 确实拥有很强的性能，但这是否意味着你随手写的一段代码就能有很高并且达到预期的性能？我看未必。&lt;/p>
&lt;h2 id="运行环境">运行环境&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Processor&lt;/th>
&lt;th>Intel Core i5 9600KF&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Memory&lt;/td>
&lt;td>16GB 3200MHz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OS&lt;/td>
&lt;td>macOS 10.15.6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Julia&lt;/td>
&lt;td>1.5.1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="优化过程">优化过程&lt;/h2>
&lt;h3 id="原始版本">原始版本&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h3>
&lt;p>废话不多说，直接开始正题，先来看今天的主角&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">using Rmath;
using BenchmarkTools;
function JGibbs1(N::Int, thin::Int)
mat = zeros(Float64, N, 2)
x = 0.
y = 0.
for i = 1:N
for j = 1:thin
x = rgamma(1, 3, 1/(y*y + 4))[1]
y = rnorm(1, 1/(x+1), 1/sqrt(2(x + 1)))[1]
end
mat[i,:] = [x,y]
end
mat
end;
@btime JGibbs1(20000, 200);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是一段关于 Gibbs 采样的代码，它主要由两个循环组成，外部循环一次产生两个值，内部循环是迭代式的，即下一次循环要用到上次循环的结果。很明显它引入了 R 的库，并用
R 的 &lt;code>rgamma&lt;/code> 和 &lt;code>rnorm&lt;/code> 实现，那么它的性能是怎样的呢？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text"> 501.798 ms (8020002 allocations: 734.56 MiB)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据原文的说法，它的性能已经比 &lt;code>Rgibbs&lt;/code> 快 17 倍，比 &lt;code>RCgibbs&lt;/code> 快 13 倍，已经是比较令人满意的结果了。&lt;/p>
&lt;h3 id="使用-c-ffi-的-rgamma-与-rnorm">使用 C-ffi 的 &lt;code>rgamma&lt;/code> 与 &lt;code>rnorm&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h3>
&lt;p>由于直接用 R 写的代码可能并不是最快的，而且它还在内层循环里，所以我们有理由相信使用 C-ffi&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> 版的 &lt;code>rgamma&lt;/code> 与 &lt;code>rnorm&lt;/code> 会更快。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">using Rmath
import Rmath: libRmath
using BenchmarkTools
function JGibbs2(N::Int, thin::Int)
mat = zeros(Float64, N, 2)
x = 0.
y = 0.
for i = 1:N
for j = 1:thin
x = ccall((:rgamma, libRmath), Float64, (Float64, Float64), 3., 1/(y*y + 4))
y = ccall((:rnorm, libRmath), Float64, (Float64, Float64), 1/(x+1), 1/sqrt(2*(x + 1)))
end
mat[i,:] = [x,y]
end
mat
end
@btime JGibbs2(20000, 200);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">JGibbs2 (generic function with 1 method)
259.387 ms (20002 allocations: 2.14 MiB)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>果然，使用 C-ffi 版的函数后性能又提升了一倍！&lt;/p>
&lt;h3 id="去除外部依赖">去除外部依赖&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h3>
&lt;p>尽管使用 C 的实现后， &lt;code>JGibbs&lt;/code> 性能提升巨大，但依赖外部库多少有点让人感觉不爽，
毕竟它和 Julia 所宣称的高性能关系不是很大（核心部分是 C 的贡献，而不是 Julia）。
既然 Julia 也是高性能语言，何不拿纯 Julia 写一个 &lt;code>JGibbs&lt;/code> 来比比？&lt;/p>
&lt;p>Julia 是为科学计算而生，它的社区维护了一个统计学库 &lt;code>Distributions&lt;/code> ，里面包含了
&lt;code>gamma&lt;/code> 与 &lt;code>norm&lt;/code> 分布的函数，可以用来替换 &lt;code>rgamma&lt;/code> 和 &lt;code>rnorm&lt;/code> ，写完之后是这个样子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">using BenchmarkTools;
using Distributions;
function JGibbs3(N::Int, thin::Int)
mat = zeros(Float64, N, 2)
x = 0.
y = 0.
for i = 1:N
for j = 1:thin
x = rand(Gamma(3, 1/(y^2 + 4)), 1)[1]
y = rand(Normal(1/(x + 1), 1/sqrt(2*(x + 1))), 1)[1]
end
mat[i,:] = [x,y]
end
mat
end
@btime JGibbs3(20000, 200);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">JGibbs3 (generic function with 1 method)
550.624 ms (8020002 allocations: 734.56 MiB)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>咦？看起来它还没有使用 R-ffi 的函数快！&lt;/p>
&lt;p>那么问题出在哪呢？仔细看结果，除了时间之外还有两个数据，一个是执行一次该函数时所分配内存的次数，另一个是函数执行期间分配内存的总量。我们回头看一下使用 C-ffi 的版本，它的测试结果显示除了性能更强外，内存分配的次数和总量也更少！而且 8020002
恰好是 20002 的 400 倍左右，正好是 &lt;code>thin=200&lt;/code> 的 2 倍。据此，我们可以猜想，在
&lt;code>for j=1:thin ... end&lt;/code> 内部存在不必要的内存分配。&lt;/p>
&lt;p>下面来进行验证。&lt;/p>
&lt;h3 id="内存分配情况分析">内存分配情况分析&lt;/h3>
&lt;p>取出循环内的一行代码，对它进行 profile ：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">using BenchmarkTools;
using Distributions;
@btime rand(Gamma(1.0, 1.0), 1)[1];
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text"> 39.136 ns (1 allocation: 96 bytes)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>奇怪，一个只返回一个 Float64 值的函数怎么会存在内存分配？仔细看 &lt;code>[1]&lt;/code> 这个细节，
问题可能出在这里。通过查看文档，发现 &lt;code>rand(Gamma(...), 1)&lt;/code> 中最后一个参数表示返回一个一维的 Array ，并且 Array 的大小是 1 ：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">using BenchmarkTools;
using Distributions;
@btime rand(Gamma(1.0, 1.0), 1)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text"> 37.541 ns (1 allocation: 96 bytes)
1-element Array{Float64,1}:
0.2929698750637693
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一个 Float64 的值有 64 位，共 8 字节（bytes），而刚刚代码中所返回只有一个
Float64 元素的 Array 竟然有 96 字节！既然我们每次只需要返回一个值，那为什么要画蛇添足去生成一个 Array 呢，直接调用只生成一个值的原型不好吗？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">using BenchmarkTools;
using Distributions;
@btime rand(Gamma(1.0, 1.0), 1)
@btime rand(Gamma(1.0, 1.0))
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text"> 37.217 ns (1 allocation: 96 bytes)
1-element Array{Float64,1}:
0.9938638399122478
8.116 ns (0 allocations: 0 bytes)
1.8038508272928604
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看，直接使用 &lt;code>rand(Gamma(...))&lt;/code> 耗时只有 &lt;code>rand(Gamma(...), 1)&lt;/code> 的 22% ，并且内存的分配是 0 ！&lt;/p>
&lt;p>有了这些结论，我们对 &lt;code>JGibbs3&lt;/code> 修改后，有了下面的代码。&lt;/p>
&lt;h3 id="去除内层循环的内存分配">去除内层循环的内存分配&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">using BenchmarkTools;
using Distributions;
function JGibbs4(N::Int, thin::Int)
mat = zeros(Float64, N, 2)
x = 0.
y = 0.
for i = 1:N
for j = 1:thin
x = rand(Gamma(3, 1/(y*y + 4)))
y = rand(Normal(1/(x + 1), 1/sqrt(2*(x + 1))))
end
mat[i,:] = [x,y]
end
mat
end
@btime JGibbs4(20000, 200);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">JGibbs4 (generic function with 1 method)
251.144 ms (20002 allocations: 2.14 MiB)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个耗时结果就正常多了，而且比调用 C-ffi 的版本还快了一丢丢；内存的分配也没那么夸张了。&lt;/p>
&lt;h3 id="去除外层循环的内存分配">去除外层循环的内存分配&lt;/h3>
&lt;p>但这并不是它的性能极限：它依然有 20002 次的内存分配。仔细观察外层循环部分，只有一个 &lt;code>mat[i,:] = [x,y]&lt;/code> ，通常人们会认为编译器把它循环展开，不涉及内存分配，但事实并非如此：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">using BenchmarkTools
mat = zeros(Int, 2, 2);
@btime mat[1, :] = [1, 2];
@btime mat[:, 1] = [1, 2];
@btime begin
mat[1, 1] = 1;
mat[1, 2] = 2;
end;
@btime begin
mat[1, 1] = 1;
mat[2, 1] = 2;
end;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text"> 259.485 ns (2 allocations: 112 bytes)
220.621 ns (2 allocations: 112 bytes)
28.665 ns (0 allocations: 0 bytes)
27.603 ns (0 allocations: 0 bytes)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们可以得出三个结论：&lt;/p>
&lt;ol>
&lt;li>在使用切片赋值时会涉及内存分配，直接使用循环则不会；&lt;/li>
&lt;li>小矩阵赋值时使用循环甚至手动展开循环性能更高；&lt;/li>
&lt;li>Julia 的 Array 使用列主序，对第一个维度操作比对其它维度操作性能更高，但提升幅
度有限。&lt;/li>
&lt;/ol>
&lt;p>于是我们把 &lt;code>JGibbs4&lt;/code> 中外层循环的矩阵赋值展开，得到 &lt;code>JGibbs5&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">using BenchmarkTools;
using Distributions;
function JGibbs5(N::Int, thin::Int)
mat = zeros(Float64, N, 2)
x = 0.
y = 0.
for i = 1:N
for j = 1:thin
x = rand(Gamma(3, 1/(y*y + 4)))
y = rand(Normal(1/(x + 1), 1/sqrt(2*(x + 1))))
end
mat[i,1] = x;
mat[i,2] = y;
end
mat
end
@btime JGibbs5(20000, 200);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">JGibbs5 (generic function with 1 method)
229.861 ms (2 allocations: 312.58 KiB)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>它比 &lt;code>JGibbs4&lt;/code> 又快了 20ms ！而且其中内存分配只有两次，已经相当令人满意了。如果要进一步压榨它的性能潜力，我们可以交换 &lt;code>mat&lt;/code> 的行列，使外层循环每次赋值时都在访问第一个维度，限于篇幅原因，这里就不展开了。&lt;/p>
&lt;h3 id="使用多线程加速">使用多线程加速&lt;/h3>
&lt;p>上面使用的方法都是在一个线程内操作，现在的机器普遍都用上的多核处理器，而超算上更是单节点上配备了数十个处理器，如此多的计算资源不利用好岂不是暴殄天物。&lt;/p>
&lt;p>那么 &lt;code>JGibbs&lt;/code> 函数能被并行化吗？答案是肯定的。&lt;/p>
&lt;p>它的内层循环粒度太小，线程切换的耗时占比太高，因此内层循环不适合并行化。而外层循环的粒度适中，我们试试将它并行化。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>
&lt;p>直接使用 &lt;code>Threads.@threads&lt;/code>&lt;/p>
&lt;p>Julia 原生支持多线程编程，并且提供了 &lt;code>Threads.@threads&lt;/code> 宏来方便对循环并行化，于
是就有了下面的代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">println(&amp;#34;nthreads = &amp;#34;, Threads.nthreads())
using BenchmarkTools;
using Distributions;
function JGibbs6(N::Int, thin::Int)
mat = zeros(Float64, N, 2)
x = 0.
y = 0.
Threads.@threads for i = 1:N
for j = 1:thin
x = rand(Gamma(3, 1/(y*y + 4)))
y = rand(Normal(1/(x + 1), 1/sqrt(2*(x + 1))))
end
mat[i,1] = x;
mat[i,2] = y;
end
mat
end
@btime JGibbs6(20000, 200);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">nthreads = 6
JGibbs6 (generic function with 1 method)
420.151 ms (52000035 allocations: 915.84 MiB)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/p>
&lt;p>这个结果很离谱。先不谈运行时间，单看它的内存分配量就知道它绝对是有问题的（至于为
什么多出来这么多的内存分配，我也还在寻找原因，如果您有什么见解，请务必发邮件告诉
我 ^_^）， &lt;code>Julia&lt;/code> 一共开了 6 个线程来加速，但结果显示它反而使运行效率降低了，问
题出在哪呢？仔细看代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"> x = 0.
y = 0.
Threads.@threads for i = 1:N
for j = 1:thin
x = rand(Gamma(3, 1/(y*y + 4)))
y = rand(Normal(1/(x + 1), 1/sqrt(2*(x + 1))))
end
...
end
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>每个线程内，都要对全局变量 &lt;code>x&lt;/code> 和 &lt;code>y&lt;/code> 进行修改，并且还要读取它们的值，这显然存在
竞争的现象。那如果把 &lt;code>x&lt;/code> 和 &lt;code>y&lt;/code> 移动到每个线程内部定义呢？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">println(&amp;#34;nthreads = &amp;#34;, Threads.nthreads())
using BenchmarkTools;
using Distributions;
function JGibbs6_1(N::Int, thin::Int)
mat = zeros(Float64, N, 2)
Threads.@threads for i = 1:N
x = rand()
y = rand()
for j = 1:thin
x = rand(Gamma(3, 1/(y*y + 4)))
y = rand(Normal(1/(x + 1), 1/sqrt(2*(x + 1))))
end
mat[i,1] = x;
mat[i,2] = y;
end
mat
end
@btime JGibbs6_1(20000, 200);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">nthreads = 6
JGibbs6_1 (generic function with 1 method)
39.926 ms (33 allocations: 316.75 KiB)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个结果相当令人满意了，内存的分配降低很多，看来读写全局的变量对并发程序性能影响
还是不容忽略！&lt;/p>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>
&lt;p>对外层循环分组后并行&lt;/p>
&lt;p>除了直接用 &lt;code>@threads&lt;/code> ，我们还可以手动对外部循环分组嘛，然后每个线程分配到一小段
连续的外层循环，相当于粒度更大。&lt;/p>
&lt;p>&lt;code>Iterators&lt;/code> 提供了对 &lt;code>Array&lt;/code> 分组的方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">help?&amp;gt; Iterators.partition
partition(collection, n)
Iterate over a collection n elements at a time.
Examples
≡≡≡≡≡≡≡≡≡≡
julia&amp;gt; collect(Iterators.partition([1,2,3,4,5], 2))
3-element Array{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},1}:
[1, 2]
[3, 4]
[5]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>利用这个函数，我们对外层循环的下标分组，然后每个线程只操作一组下标，这样有效避免了数据竞争发生。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">using BenchmarkTools;
using Distributions;
println(&amp;#34;nthreads = &amp;#34;, Threads.nthreads())
function JGibbs7(N::Int, thin::Int)
nt = Threads.nthreads()
# mat = zeros(Float64, N, 2)
mat = zeros(Float64, N, 2)
# partition
parts = Iterators.partition(1:N, N ÷ Threads.nthreads() + 1) |&amp;gt; collect
Threads.@threads for p in parts
x = 0.
y = 0.
for i in p
for j in 1:thin
x = rand(Gamma(3, 1/(y^2 + 4)))
y = rand(Normal(1/(x + 1), 1/sqrt(2*(x + 1))))
end
mat[i,1] = x
mat[i,2] = y
end
end
mat
end
@btime JGibbs7(20000, 200);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">nthreads = 6
JGibbs7 (generic function with 1 method)
41.631 ms (34 allocations: 316.91 KiB)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个结果和 &lt;code>JGibbs6_1&lt;/code> 相差不大，都是已经充分利用了 6 个线程的计算资源。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>本文从一名用户的角度，浅显地阐述了如何对一个函数进行优化，以及如何使用各类工具来帮助我们分析程序的运行状况。我得出以下几个结论，供大家参考：&lt;/p>
&lt;ol>
&lt;li>使用纯 Julia 编写的程序性能的 &lt;strong>上限&lt;/strong> 很高，完全不输于调用 FFI ，因此大家对此
不应有过多的顾虑，直接用就完事了；&lt;/li>
&lt;li>尽管我们认为处理器的计算是耗时大头，程序运行时的内存反复分配也可能成为程序运
行的瓶颈；&lt;/li>
&lt;li>在使用并发加速时应格外小心是否存在竞争的风险，能做到内聚就尽量做到内聚，否则
将来总会掉到坑里；&lt;/li>
&lt;li>想发挥出 Julia 真正的性能，还是需要下一些功夫的，随手一写还真不一定比其它语言
快；好在 Julia 社区提供了实用的性能分析工具，大大简化了优化的流程，这一点我十
分赞赏。&lt;/li>
&lt;/ol>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>代码来自三爷的 gist : &lt;a href="https://gist.github.com/MitsuhaMiyamizu/5edf031a36cfb260381a70060a3fea4a">https://gist.github.com/MitsuhaMiyamizu/5edf031a36cfb260381a70060a3fea4a&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>这里使用 BenchmarkTools 中的 &lt;code>@btime&lt;/code> 而不是 &lt;code>@time&lt;/code> 是因为后者并不能将代 码编译的时间去掉，前者则能多次执行，取耗时最小值，有效避免了 AOT 对计时的影响。 &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>ffi 即 Foreign function interface ，用于跨语言调函数，详见 &lt;a href="https://en.wikipedia.org/wiki/Foreign%5Ffunction%5Finterface">https://en.wikipedia.org/wiki/Foreign%5Ffunction%5Finterface&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>我在启动 &lt;code>julia&lt;/code> 前对环境变量进行了修改 &lt;code>export JULIA_NUM_THREADS=6&lt;/code> ，这 样 Julia 在运行时支持最大 6 个线程操作。 &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>新的旅程</title><link>http://ionizing.page/post/a-new-journey/</link><pubDate>Wed, 14 Apr 2021 16:15:00 +0800</pubDate><guid>http://ionizing.page/post/a-new-journey/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#%E5%9B%9E%E5%BD%92">回归&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3">博客相关&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E9%85%8D%E7%BD%AE-%E6%A8%A1%E6%9D%BF">配置、模板&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%9B%BE%E7%89%87%E7%AD%89%E5%A4%96%E9%83%A8%E6%96%87%E4%BB%B6%E7%9A%84%E5%BC%95%E7%94%A8">图片等外部文件的引用&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BD%BF%E7%94%A8-tikz-%E9%85%8D%E5%90%88-orgmode-%E8%BF%9B%E8%A1%8C%E7%94%BB%E5%9B%BE-%E6%9B%B4%E6%96%B0">使用 TikZ 配合 Orgmode 进行画图 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->[2021-04-29 Thu] &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> 更新&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E8%BE%93%E5%87%BA-png-%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%9B%BE%E7%89%87">输出 PNG 格式的图片&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%BE%93%E5%87%BA-svg-%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%9B%BE%E7%89%87">输出 SVG 格式的图片&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>这是回归博客写作后的第一篇文章&lt;/p>
&lt;h2 id="回归">回归&lt;/h2>
&lt;p>时光荏冉，已经好久没有更新博客了，上一次写博客还是去年寒假疫情在家时期。&lt;/p>
&lt;p>这一年多以来总算把与实验组合作的几个工作结束了（第一次实践使用 VASP ），这几个工作感觉能总结的地方不多，都是细节居多，但坑还是不少的。我自己的工作做了快两年了
（看来平时没少摸鱼），在去年底它的进度有了 180 度转变，这还多亏了导师的嘱托，让我在补充图表时 Review 了一下之后的结果，一看就发现之前的结论完全错误，于是重新跑了一下 NAMD ，这次的结果终于符合「预期」了，但现在似乎又遇到了一些不大不小的问题，
即能带交叉的处理，目测解决它又要费些时间了（而且还中间还有其它实验组的东西要做）。&lt;/p>
&lt;p>说了这段时间自己在做什么，下面就该讲博客相关的东西了。&lt;/p>
&lt;h2 id="博客相关">博客相关&lt;/h2>
&lt;p>关于博客，我这次决心将它迁移到 Hugo 框架下，配合 Org-mode 和 ox-hugo 使用，至少到现在体验挺好：&lt;/p>
&lt;ul>
&lt;li>Hugo 很快，生成静态页面耗时在 ms 量级，比 Hexo 不知道高到哪里去了；&lt;/li>
&lt;li>Org-mode 很强大，谁用谁知道；&lt;/li>
&lt;li>私以为 Jane 主题足够简约，也留了足够的空间折腾。&lt;/li>
&lt;/ul>
&lt;p>近期做了些工作，我会把心得总结起来放到博客上，供自己和小伙伴们参考～&lt;/p>
&lt;h3 id="配置-模板">配置、模板&lt;/h3>
&lt;p>以下是写博客时可能要用到的一些模板/配置，仅供自己参考了。&lt;/p>
&lt;ul>
&lt;li>Org-mode 中 CJK 文档的 soft space 问题，已经有人给出了解决方案&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> ：&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-elisp" data-lang="elisp">&lt;span class="p">(&lt;/span>&lt;span class="nb">defun&lt;/span> &lt;span class="nv">clear-single-linebreak-in-cjk-string&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="s">&amp;#34;clear single line-break between cjk characters that is usually soft line-breaks&amp;#34;&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">let*&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nv">regexp&lt;/span> &lt;span class="s">&amp;#34;\\([\u4E00-\u9FA5]\\)\n\\([\u4E00-\u9FA5]\\)&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">start&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">string-match&lt;/span> &lt;span class="nv">regexp&lt;/span> &lt;span class="nf">string&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">while&lt;/span> &lt;span class="nv">start&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">setq&lt;/span> &lt;span class="nf">string&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">replace-match&lt;/span> &lt;span class="s">&amp;#34;\\1\\2&amp;#34;&lt;/span> &lt;span class="no">nil&lt;/span> &lt;span class="no">nil&lt;/span> &lt;span class="nf">string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nv">start&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">string-match&lt;/span> &lt;span class="nv">regexp&lt;/span> &lt;span class="nf">string&lt;/span> &lt;span class="nv">start&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;span class="nf">string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">defun&lt;/span> &lt;span class="nv">ox-html-clear-single-linebreak-for-cjk&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">string&lt;/span> &lt;span class="nv">backend&lt;/span> &lt;span class="nv">info&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">when&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">org-export-derived-backend-p&lt;/span> &lt;span class="nv">backend&lt;/span> &lt;span class="ss">&amp;#39;html&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">clear-single-linebreak-in-cjk-string&lt;/span> &lt;span class="nf">string&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">eval-after-load&lt;/span> &lt;span class="s">&amp;#34;ox&amp;#34;&lt;/span>
&lt;span class="o">&amp;#39;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">add-to-list&lt;/span> &lt;span class="ss">&amp;#39;org-export-filter-final-output-functions&lt;/span>
&lt;span class="ss">&amp;#39;ox-html-clear-single-linebreak-for-cjk&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>添加链接时使用 &lt;code>C-c C-l&lt;/code> ， Doom-Emacs 会提示你输入链
接的 URL 和 description；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 Inline code 时，参考它&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>： &lt;code>src_sh[:exports code]{echo -e &amp;quot;test&amp;quot;}&lt;/code> ；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>:PROPERTIES:&lt;/code> 中 &lt;code>:@cat:&lt;/code> 定义了一个 category &lt;code>cat&lt;/code> ， &lt;code>:foo:&lt;/code> 定义了一个 tag &lt;code>foo&lt;/code> ，
&lt;code>:@cat:foo:bar:&lt;/code> 则分别定义了一个 category &lt;code>cat&lt;/code> ，两个 tags &lt;code>foo&lt;/code> 、 &lt;code>bar&lt;/code> ；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每篇文章标题前使用 &lt;code>S-left&lt;/code> 或 &lt;code>S-right&lt;/code> 可以切换 &lt;code>TODO&lt;/code> 和 &lt;code>DONE&lt;/code> 的状态；输
入数学公式时，需要在 subtree 的 &lt;code>:PROPERTIES:&lt;/code> 里加上
&lt;code>:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :katex true :markup goldmark&lt;/code> 。&lt;/p>
&lt;p>此时 &lt;code>\(F=ma\)&lt;/code> 表示 inline equation ，输出 \(F=ma\) ； &lt;code>\[F=ma\]&lt;/code> 表示
displaystyle equation 。（冷知识&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>： Orgmode 支持
即时渲染公式： &lt;code>C-c C-x C-l&lt;/code> 会把当前公式渲染好并以 png 的形式插入当前窗口，重
复这个操作可以关闭预览）&lt;/p>
&lt;p>现在试试一个稍稍复杂点的公式：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>\[ \begin{aligned} \nabla \times \vec{\mathbf{B}} - \frac1c
\frac{\partial\vec{\mathbf{E}}}{\partial t} &amp;amp; = \frac{4\pi}{c}\vec{\mathbf{j}}
\newline \nabla \cdot \vec{\mathbf{E}} &amp;amp; = 4 \pi \rho \newline \nabla \times
\vec{\mathbf{E}} + \frac1c \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp;amp; =
\vec{\mathbf{0}} \newline \nabla \cdot \vec{\mathbf{B}} &amp;amp; = 0 \end{aligned} \]&lt;/p>
&lt;ul>
&lt;li>使用脚注来代替文献的上标&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>
，有三种方式：
&lt;ol>
&lt;li>声明和定义分离的脚注：在要添加脚注的地方声明 &lt;code>[fn:NAME]&lt;/code> ，然后在其它地方定
义这个脚注 &lt;code>[fn:NAME] some description here ...&lt;/code> ；&lt;/li>
&lt;li>行内定义的脚注：直接使用 &lt;code>[fn:: some description here ... ]&lt;/code> ，这种方法不需要命名，可谓对程序员十分友好了 23333 ；&lt;/li>
&lt;li>带名字的行内脚注： &lt;code>[fn:NAME: some description here ...]&lt;/code> 。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="图片等外部文件的引用">图片等外部文件的引用&lt;/h3>
&lt;p>这一节单独列出来是因为它比数学公式还要难处理，根据 &lt;code>ox-hugo&lt;/code>&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> 的说明，现在有三种引用图片的方法：&lt;/p>
&lt;ol>
&lt;li>使用相对路径：直接把图片放到 &lt;code>&amp;lt;HUGO_BASE_DIR&amp;gt;/static/&lt;/code> 里，然后引用时可以省略
&lt;code>&amp;lt;HUGO_BASE_DIR&amp;gt;/static/&lt;/code> 前缀，例如有一个文件路径是
&lt;code>&amp;lt;HUGO_BASE_DIR&amp;gt;/static/image/foo.png&lt;/code> ，引用它时可以这样写：
&lt;code>[[image/foo.png]]&lt;/code> ；&lt;/li>
&lt;li>使用绝对路径：例如有一个路径是 &lt;code>~/some/path/foo.png&lt;/code> ，引用它时可以使用
&lt;code>[[~/some/path/foo.png]]&lt;/code> ，此时不光在 orgmode 里可以直接预览图片， &lt;code>ox-hugo&lt;/code>
在导出时还会把它复制到 &lt;code>&amp;lt;HUGO_BASE_DIR&amp;gt;/static/ox-hugo/&lt;/code> 里并生成链接；&lt;/li>
&lt;li>使用图床：现在 GitHub ， GitLab 等也可以用作图床，并且有成熟的软件来做这件事
比如 PicGo&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup> 。把图片传给图床后，图
床会返回一个链接，直接把它贴在 orgmode 里就能实现引用图片的效果。但之前我用七
牛云的图床一段时间后七牛云直接拒绝被薅，改了域名，我也就对图床产生一些顾虑
&lt;del>，而且使用图床后一个缺点是，它降低了每篇文章的内聚度，增加了对外部的耦合（掉个
书袋233）&lt;/del> 。&lt;/li>
&lt;/ol>
&lt;p>因此我还是决定把图片等外部文件放在 &lt;code>&amp;lt;HUGO_BASE_DIR&amp;gt;/content-org/&lt;/code> 里，每篇文章单独建一个文件夹，然后使用相对路径引用。下面是效果展示（它使用了
&lt;code>[[./a-new-journey/himehina.jpeg]]&lt;/code> ）：&lt;img src="http://ionizing.page/ox-hugo/himehina.jpeg" alt="">&lt;/p>
&lt;h3 id="使用-tikz-配合-orgmode-进行画图-更新">使用 TikZ 配合 Orgmode 进行画图 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->[2021-04-29 Thu] &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> 更新&lt;/h3>
&lt;p>Orgmode 原生支持内嵌 \(\LaTeX\) 代码，自然也支持用 TikZ 画图。不过如果想要在利用
TikZ 的输出嵌入到博客中，还需要一点工作要做。&lt;/p>
&lt;h4 id="输出-png-格式的图片">输出 PNG 格式的图片&lt;/h4>
&lt;ul>
&lt;li>确保机器上已经安装了 ImageMagick 和 \(\LaTeX\) ；&lt;/li>
&lt;li>在 config 中加入 &lt;code>(setq org-latex-create-formula-image-program 'imagemagick)&lt;/code> ；&lt;/li>
&lt;/ul>
&lt;p>接下来就可以愉快玩耍了：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-org" data-lang="org">&lt;span class="cs">#+header&lt;/span>&lt;span class="c">: :headers &amp;#39;(&amp;#34;\\usepackage{tikz}&amp;#34;)&lt;/span>
&lt;span class="cs">#+header&lt;/span>&lt;span class="c">: :results file graphics :file ./a-new-journey/test.png&lt;/span>
&lt;span class="cs">#+header&lt;/span>&lt;span class="c">: :exports results&lt;/span>
&lt;span class="cs">#+header&lt;/span>&lt;span class="c">: :fit yes :imoutoptions -geometry 400 :iminoptions -density 600&lt;/span>
&lt;span class="c">#+begin_src &lt;/span>&lt;span class="cs">latex&lt;/span>&lt;span class="c">
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="k">\begin&lt;/span>&lt;span class="nb">{&lt;/span>tikzpicture&lt;span class="nb">}&lt;/span>
&lt;span class="k">\draw&lt;/span>&lt;span class="na">[-&amp;gt;]&lt;/span> (-3,0) -- (-2,0) arc[radius=0.5cm,start angle=-180,end angle=0]
(-1,0) -- (1,0) arc[radius=0.5cm,start angle=180,end angle=0] (2,0) -- (3,0);
&lt;span class="k">\filldraw&lt;/span> (-1.5,0) circle[radius=1mm];
&lt;span class="k">\filldraw&lt;/span> (1.5,0) circle[radius=1mm];
&lt;span class="k">\end&lt;/span>&lt;span class="nb">{&lt;/span>tikzpicture&lt;span class="nb">}&lt;/span>
&lt;span class="c">#+end_src&lt;/span>
&lt;span class="cs">#+RESULTS&lt;/span>&lt;span class="c">:&lt;/span>
[[&lt;span class="na">file:./a-new-journey/test.png&lt;/span>]]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Eval 这个 source block 后即可得到：&lt;/p>
&lt;link rel="stylesheet" href="http://ionizing.page/css/hugo-easy-gallery.css" />
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/test.png" />
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/test.png" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;h4 id="输出-svg-格式的图片">输出 SVG 格式的图片&lt;/h4>
&lt;ul>
&lt;li>确保机器上已经安装了 \(\LaTeX\)&lt;/li>
&lt;/ul>
&lt;p>接下来的工作不那么优雅，我们需要修改一下 &lt;code>ob-latex.el&lt;/code> 。&lt;/p>
&lt;p>因为在 Orgmode 中 Eval 代码块时 Orgmode 会自动把代码块的内容加入预告写好的
Preamble 里生成一个临时文件，但当使用 &lt;code>.svg&lt;/code> 结尾的输出文件名时它的 Preamble 是这样的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-latex" data-lang="latex">&lt;span class="k">\documentclass&lt;/span>&lt;span class="na">[preview]&lt;/span>&lt;span class="nb">{&lt;/span>standalone&lt;span class="nb">}&lt;/span>
&lt;span class="k">\def\pgfsysdriver&lt;/span>&lt;span class="nb">{&lt;/span>pgfsys-tex4ht.def&lt;span class="nb">}&lt;/span>
&lt;span class="c">%% Your \usepackage here
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="k">\begin&lt;/span>&lt;span class="nb">{&lt;/span>document&lt;span class="nb">}&lt;/span>
&lt;span class="c">%% Your code here
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="k">\end&lt;/span>&lt;span class="nb">{&lt;/span>document&lt;span class="nb">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第二行的 &lt;code>\def\pgfsysdriver&lt;/code> 需要放在 &lt;code>\usepackage{tikz}&lt;/code> 后，或者使用 &lt;code>htlatex&lt;/code>
才能编译，但 ob-latex 使用的是 &lt;code>latex&lt;/code> ，而且这个过程只会提示 &lt;code>PDF produced with errors&lt;/code> ，导致输出的 SVG 是乱码。&lt;/p>
&lt;p>查询 &lt;code>ob-latex.el&lt;/code> 发现，这个 Preamble 是硬编码在 &lt;code>org-babel-execute:latex&lt;/code> 里的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-elisp" data-lang="elisp"> &lt;span class="p">(&lt;/span>&lt;span class="nb">defcustom&lt;/span> &lt;span class="nv">org-babel-latex-preamble&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">lambda&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">_&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="s">&amp;#34;\\documentclass[preview]{standalone}
&lt;/span>&lt;span class="s">\\def\\pgfsysdriver{pgfsys-tex4ht.def}
&lt;/span>&lt;span class="s"> &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="s">&amp;#34;Closure which evaluates at runtime to the LaTeX preamble.&amp;#34;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">with-temp-file&lt;/span> &lt;span class="nv">tex-file&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">insert&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">concat&lt;/span>
&lt;span class="s">&amp;#34;\\documentclass[preview]{standalone}
&lt;/span>&lt;span class="s">\\def\\pgfsysdriver{pgfsys-tex4ht.def}
&lt;/span>&lt;span class="s"> &amp;#34;&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">mapconcat&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">lambda&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">pkg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">concat&lt;/span> &lt;span class="s">&amp;#34;\\usepackage&amp;#34;&lt;/span> &lt;span class="nv">pkg&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>那问题就好办了，直接删掉两处 &lt;code>\\def\\pgfsysdriver{pgfsys-tex4ht.def}&lt;/code> ，并重新
build （我使用的是 DoomEmacs ，运行 &lt;code>~/.emacs.d/bin/doom build&lt;/code> ），然后就可以正常导出了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-org" data-lang="org">&lt;span class="cs">#+header&lt;/span>&lt;span class="c">: :headers &amp;#39;(&amp;#34;\\usepackage{tikz}&amp;#34;)&lt;/span>
&lt;span class="cs">#+header&lt;/span>&lt;span class="c">: :results file graphics :file ./a-new-journey/test.svg&lt;/span>
&lt;span class="cs">#+header&lt;/span>&lt;span class="c">: :exports results&lt;/span>
&lt;span class="cs">#+header&lt;/span>&lt;span class="c">: :fit yes :imoutoptions -geometry 400 :iminoptions -density 600&lt;/span>
&lt;span class="c">#+begin_src &lt;/span>&lt;span class="cs">latex&lt;/span>&lt;span class="c">
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="k">\begin&lt;/span>&lt;span class="nb">{&lt;/span>tikzpicture&lt;span class="nb">}&lt;/span>
&lt;span class="k">\draw&lt;/span>&lt;span class="na">[-&amp;gt;]&lt;/span> (-3,0) -- (-2,0) arc[radius=0.5cm,start angle=-180,end angle=0]
(-1,0) -- (1,0) arc[radius=0.5cm,start angle=180,end angle=0] (2,0) -- (3,0);
&lt;span class="k">\filldraw&lt;/span> (-1.5,0) circle[radius=1mm];
&lt;span class="k">\filldraw&lt;/span> (1.5,0) circle[radius=1mm];
&lt;span class="k">\end&lt;/span>&lt;span class="nb">{&lt;/span>tikzpicture&lt;span class="nb">}&lt;/span>
&lt;span class="c">#+end_src&lt;/span>
&lt;span class="cs">#+RESULTS&lt;/span>&lt;span class="c">:&lt;/span>
[[&lt;span class="na">file:./a-new-journey/test.svg&lt;/span>]]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出以下图形：&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="http://ionizing.page/ox-hugo/test.svg" />
&lt;/div>
&lt;a href="http://ionizing.page/ox-hugo/test.svg" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>其实看 &lt;code>ob-latex.el&lt;/code> 似乎可以通过用户定义 &lt;code>org-babel-latex-preamble&lt;/code> 来绕过硬编码的 Preamble ，但经过测试发现并没有起作用，如果读者有更好方案，请务必联系我。&lt;/p>
&lt;p>上面测试用的 TikZ 代码圴来自 Jonny Evans&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>，同时感谢群组内&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>大佬们的帮助。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="http://zwz.github.io">http://zwz.github.io&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://stackoverflow.com/questions/16186843/inline-code-in-org-mode/16193498#16193498">https://stackoverflow.com/questions/16186843/inline-code-in-org-mode/16193498#16193498&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://orgmode.org/worg/org-tutorials/org-latex-preview.html">https://orgmode.org/worg/org-tutorials/org-latex-preview.html&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>&lt;a href="https://orgmode.org/manual/Creating-Footnotes.html">https://orgmode.org/manual/Creating-Footnotes.html&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>&lt;a href="https://ox-hugo.scripter.co">https://ox-hugo.scripter.co&lt;/a> &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo&lt;/a> &lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>&lt;a href="https://www.homepages.ucl.ac.uk/~ucahjde/blog/tikz.html">https://www.homepages.ucl.ac.uk/~ucahjde/blog/tikz.html&lt;/a> &lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>&lt;a href="https://t.me/emacs%5Fzh">https://t.me/emacs%5Fzh&lt;/a> &lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>