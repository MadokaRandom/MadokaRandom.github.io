<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Ionizing Radiation</title><link>http://ionizing.page/tags/posts/</link><description>Recent content in Posts on Ionizing Radiation</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 04 Apr 2023 00:10:00 +0800</lastBuildDate><atom:link href="http://ionizing.page/tags/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>如何将文件打包进 C/C++/Fortran 程序内</title><link>http://ionizing.page/post/embed_binary_to_c_fortran/</link><pubDate>Tue, 04 Apr 2023 00:10:00 +0800</pubDate><guid>http://ionizing.page/post/embed_binary_to_c_fortran/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0">问题描述&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95">解决方法&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E7%9B%B4%E6%8E%A5%E5%86%99-const-char">直接写 &lt;code>const char*&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%80%9A%E8%BF%87-inline-assembly">通过 inline assembly&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%AE%8F-plus-%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96">宏+内联汇编&lt;/a>&lt;/li>
&lt;li>&lt;a href="#fortran-%E7%9A%84%E5%A4%84%E7%90%86">Fortran 的处理&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%B0%8F%E7%BB%93">小结&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>最近在写 Fortran 程序时有一个需求：把另一个文件打包进二进制里面，以便可以随时 &lt;code>print&lt;/code> 出来，经过一番网上冲浪，
摸索出来几个 workaround ，在此记录一下。&lt;/p></description></item><item><title>在 CentOS 7 上使用 Clangd 作为 C/C++ 的 LSP</title><link>http://ionizing.page/post/use_clangd_as_lsp_on_centos7/</link><pubDate>Sat, 25 Mar 2023 19:22:00 +0800</pubDate><guid>http://ionizing.page/post/use_clangd_as_lsp_on_centos7/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E8%A6%81%E6%B1%82">基本环境要求&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%AE%89%E8%A3%85-clangd">安装 &lt;code>clangd&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%85%8D%E7%BD%AE-coc-dot-nvim">配置 &lt;code>coc.nvim&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>最近在 CentOS 7 服务器上写程序时没有 LSP 的帮助，感觉写起来很费劲，于是折腾了一下 &lt;code>clangd&lt;/code> 使之能为 &lt;code>coc.nvim&lt;/code> 所用。&lt;/p></description></item><item><title>利用 Const Generics 实现编译期量纲分析</title><link>http://ionizing.page/post/dimensional-analysis-using-const-generics/</link><pubDate>Sun, 05 Mar 2023 11:59:00 +0800</pubDate><guid>http://ionizing.page/post/dimensional-analysis-using-const-generics/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8F%E7%BA%B2%E5%88%86%E6%9E%90">什么是量纲分析&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BB%80%E4%B9%88%E6%98%AF-const-generics">什么是 Const Generics&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-const-generics-%E5%AE%9E%E7%8E%B0%E9%87%8F%E7%BA%B2%E5%88%86%E6%9E%90">如何使用 Const Generics 实现量纲分析&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E8%BF%90%E8%A1%8C%E6%9C%9F%E9%87%8F%E7%BA%B2%E5%88%86%E6%9E%90">运行期量纲分析&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%88%A9%E7%94%A8-const-generics-%E5%AE%9E%E7%8E%B0%E7%BC%96%E8%AF%91%E6%9C%9F%E7%9A%84%E9%87%8F%E7%BA%B2%E5%88%86%E6%9E%90">利用 const generics 实现编译期的量纲分析&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#siunit-%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E8%BF%90%E7%AE%97">&lt;code>SiUnit&lt;/code> 的编译期运算&lt;/a>&lt;/li>
&lt;li>&lt;a href="#physicalquantity-%E7%9A%84%E5%8A%A0%E5%87%8F%E6%B3%95%E8%BF%90%E7%AE%97">&lt;code>PhysicalQuantity&lt;/code> 的加减法运算&lt;/a>&lt;/li>
&lt;li>&lt;a href="#physicalquantity-%E7%9A%84%E4%B9%98%E9%99%A4%E6%B3%95%E8%BF%90%E7%AE%97">&lt;code>PhysicalQuantity&lt;/code> 的乘除法运算&lt;/a>&lt;/li>
&lt;li>&lt;a href="#physicalquantity-%E7%9A%84%E4%B9%98%E6%96%B9%E5%BC%80%E6%96%B9%E8%BF%90%E7%AE%97">&lt;code>PhysicalQuantity&lt;/code> 的乘方开方运算&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%97%A0%E9%87%8F%E7%BA%B2%E6%95%B0%E5%8F%8A%E5%B8%B8%E7%B3%BB%E6%95%B0%E7%9A%84%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86">无量纲数及常系数的特殊处理&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%85%B6%E5%AE%83%E5%AE%9E%E7%8E%B0">其它实现&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%80%BB%E7%BB%93">总结&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>开学前折腾了一段时间的 Rust const generics ，也读了一些前人的代码，并自己写出了自己的编译期量纲分析代码，
因此吸收总结这一过程所得知识，产生了这篇博文。本文的实现全部代码在&lt;a href="https://play.rust-lang.org/?version=nightly&amp;amp;mode=debug&amp;amp;edition=2021&amp;amp;gist=4807be24f1e6493bcc5c7cb86457439c">这里&lt;/a>。&lt;/p></description></item><item><title>简易 DFT 玩具</title><link>http://ionizing.page/post/simple-dft-toy/</link><pubDate>Sun, 14 Aug 2022 22:13:00 +0800</pubDate><guid>http://ionizing.page/post/simple-dft-toy/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80">理论基础&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0">程序实现&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#nabla-2-%E7%9A%84%E7%9F%A9%E9%98%B5%E8%A1%A8%E7%A4%BA">\(\nabla^2\) 的矩阵表示&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8A%BF%E8%83%BD%E7%9A%84%E8%A1%A8%E7%A4%BA">势能的表示&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%A4%96%E5%9C%BA%E5%8A%BF%E8%83%BD-v-text-ext--mathbf-r">外场势能 \(v_\text{ext}(\mathbf r)\)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%94%B5%E5%AD%90%E5%AF%86%E5%BA%A6-rho--mathbf-r">电子密度 \(\rho(\mathbf r)\)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%BA%93%E4%BB%91%E5%8A%BF-v-text-ha--mathbf-r">库仑势 \(v_\text{Ha}(\mathbf r)\)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BA%A4%E6%8D%A2%E5%85%B3%E8%81%94%E5%8A%BF">交换关联势&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#hamiltonian-%E7%9A%84%E6%9E%84%E9%80%A0">Hamiltonian 的构造&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ks-%E6%96%B9%E7%A8%8B%E7%9A%84%E8%BF%AD%E4%BB%A3%E6%B1%82%E8%A7%A3">KS 方程的迭代求解&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%80%BB%E7%BB%93%E4%B8%8E%E6%8B%93%E5%B1%95">总结与拓展&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>一直在用别人写好的 DFT 软件，对软件的运行过程略有兴趣，查阅资料弄懂了一些运行原理并参考了前人的程序后，这次我们来自己写一个 DFT 的玩具～&lt;/p></description></item><item><title>使用数值方法求解单电子 Schrodinger 方程</title><link>http://ionizing.page/post/schrodinger-equation-numerical-methods/</link><pubDate>Fri, 06 Aug 2021 14:44:00 +0800</pubDate><guid>http://ionizing.page/post/schrodinger-equation-numerical-methods/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#%E5%8D%95%E7%B2%92%E5%AD%90%E5%AE%9A%E6%80%81-schrodinger-%E6%96%B9%E7%A8%8B">单粒子定态 Schrodinger 方程&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%9C%89%E9%99%90%E5%B7%AE%E5%88%86%E6%B3%95">有限差分法&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E4%B8%80%E9%98%B6%E5%AF%BC%E6%95%B0%E7%9A%84%E7%A6%BB%E6%95%A3%E5%8C%96">一阶导数的离散化&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BA%8C%E9%98%B6%E5%AF%BC%E6%95%B0%E7%9A%84%E7%A6%BB%E6%95%A3%E5%8C%96">二阶导数的离散化&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%80%E7%BB%B4%E7%B3%BB%E7%BB%9F-hamiltonian-%E7%9A%84%E6%9E%84%E9%80%A0%E5%8F%8A%E6%B1%82%E8%A7%A3">一维系统 Hamiltonian 的构造及求解&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E4%B8%80%E7%BB%B4%E5%8A%BF%E7%AE%B1%E6%A8%A1%E5%9E%8B%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%B1%82%E8%A7%A3">一维势箱模型系统的求解&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%B8%A6%E6%9C%89-chulkov-%E5%8A%BF%E7%9A%84%E4%B8%80%E7%BB%B4%E5%8A%BF%E7%AE%B1%E7%B3%BB%E7%BB%9F%E6%B1%82%E8%A7%A3">带有 Chulkov 势的一维势箱系统求解&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E4%BA%8C%E7%BB%B4%E5%8F%8A%E6%9B%B4%E9%AB%98%E7%BB%B4%E7%B3%BB%E7%BB%9F%E7%9A%84-hamiltonian-%E6%9E%84%E9%80%A0%E4%B8%8E%E6%B1%82%E8%A7%A3">二维及更高维系统的 Hamiltonian 构造与求解&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E9%AB%98%E7%BB%B4-laplacian-%E7%9A%84%E7%A6%BB%E6%95%A3%E5%8C%96">高维 Laplacian 的离散化&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%AB%98%E7%BB%B4-hamiltonian-%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E6%B1%82%E8%A7%A3">高维 Hamiltonian 的构造与求解&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%9C%89%E9%99%90%E5%85%83%E6%B3%95">有限元法&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%AE%9A%E6%80%81-schrodinger-%E6%96%B9%E7%A8%8B%E7%9A%84%E5%8F%98%E5%88%86%E5%BC%B1%E8%A7%A3%E5%BD%A2%E5%BC%8F">定态 Schrodinger 方程的变分弱解形式&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E5%8F%8A%E7%BB%93%E6%9E%9C%E9%AA%8C%E8%AF%81">程序实现及结果验证&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%80%BB%E7%BB%93%E5%8F%8A%E5%90%90%E6%A7%BD">总结及吐槽&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%90%90%E6%A7%BD">吐槽&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>经常有人觉得会解薛定谔方程会给人一种很厉害的感觉（尤其是对还没学过 QM QC 等课程中学生小朋友而言），
确实，现在能写出解析解的 Schrodinger 方程屈指可数；
而且仅仅增加粒子数量不考虑各种修正就足以使求解的难度上升一大截。
不过在这里我们不考虑多个粒子的情况，也不考虑什么相对论效应 blabla ，
我们只考虑一个电子在一个任意势场下的定态 Schrodinger 方程，
然后来用数值方法求解这个方程，得到电子的波函数并可视化，
顺便验证一下教材上各种电子轨道的分布图，体验一把亲手解 Schrodinger 方程的感觉。&lt;/p></description></item><item><title>镜像态的那些坑</title><link>http://ionizing.page/post/issues-with-ips/</link><pubDate>Thu, 06 May 2021 00:18:00 +0800</pubDate><guid>http://ionizing.page/post/issues-with-ips/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#%E8%A1%A8%E9%9D%A2%E6%80%81%E4%B8%8E%E9%95%9C%E5%83%8F%E6%80%81">表面态与镜像态&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E8%A1%A8%E9%9D%A2%E6%80%81--surface-states-ss">表面态(Surface States, SS)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%95%9C%E5%83%8F%E6%80%81--image-potential-states-ips">镜像态(Image Potential States, IPS)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B">计算过程&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E8%AE%A1%E7%AE%97%E5%8F%82%E6%95%B0">计算参数&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E8%B6%B3%E5%A4%9F%E7%9A%84%E7%A9%BA%E5%B8%A6">足够的空带&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%B6%B3%E5%A4%9F%E7%9A%84%E7%9C%9F%E7%A9%BA%E5%B1%82">足够的真空层&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%81%B6%E6%9E%81%E6%A0%A1%E6%AD%A3">偶极校正&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E9%AA%8C%E8%AF%81%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%9C">验证计算结果&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#pdos-%E6%B3%95">PDOS 法&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%AE%9E%E7%A9%BA%E9%97%B4%E5%88%86%E5%B8%83%E6%B3%95">实空间分布法&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%83%BD%E5%B8%A6%E6%B3%95">能带法&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E9%99%84%E5%BD%95">附录&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E9%95%9C%E5%83%8F%E5%8A%BF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%8E%A8%E5%AF%BC">镜像势表达式的推导&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>本文是帮实验组计算表面态与镜像态相关性质时所遇到一些坑的总结。&lt;/p></description></item><item><title>VASP 偶极校正及功函数的计算</title><link>http://ionizing.page/post/vasp-dipol-correction-work-function/</link><pubDate>Fri, 23 Apr 2021 16:44:00 +0800</pubDate><guid>http://ionizing.page/post/vasp-dipol-correction-work-function/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#%E6%A6%82%E5%BF%B5%E8%A7%A3%E9%87%8A">概念解释&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%8A%9F%E5%87%BD%E6%95%B0">功函数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%9C%9F%E7%A9%BA%E8%83%BD%E7%BA%A7">真空能级&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%81%B6%E6%9E%81%E6%A0%A1%E6%AD%A3">偶极校正&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97">如何计算&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%81%B6%E6%9E%81%E6%A0%A1%E6%AD%A3">偶极校正&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8A%9F%E5%87%BD%E6%95%B0">功函数&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E7%9C%9F%E7%A9%BA%E8%83%BD%E7%BA%A7">真空能级&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>水文一篇，介绍了如何用 VASP 添加偶极校正参数、计算 Slab 体系的功函数，以及如何找真空能级。&lt;/p></description></item><item><title>VASP 收敛性测试的小脚本</title><link>http://ionizing.page/post/vasp-convergence-test-scripts/</link><pubDate>Fri, 16 Apr 2021 20:57:00 +0800</pubDate><guid>http://ionizing.page/post/vasp-convergence-test-scripts/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#sigma-%E7%9A%84%E6%B5%8B%E8%AF%95">&lt;code>SIGMA&lt;/code> 的测试&lt;/a>&lt;/li>
&lt;li>&lt;a href="#encut-%E7%9A%84%E6%B5%8B%E8%AF%95">&lt;code>ENCUT&lt;/code> 的测试&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%99%B6%E6%A0%BC%E5%8F%82%E6%95%B0%E7%9A%84%E6%B5%8B%E8%AF%95">晶格参数的测试&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E6%99%B6%E6%A0%BC%E5%B8%B8%E6%95%B0%E7%9A%84%E6%B5%8B%E8%AF%95">晶格常数的测试&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%99%B6%E6%A0%BC%E9%95%BF%E5%BA%A6%E7%9A%84%E6%B5%8B%E8%AF%95">晶格长度的测试&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#slab-%E8%A1%AC%E5%BA%95%E5%B1%82%E6%95%B0%E7%9A%84%E6%B5%8B%E8%AF%95">Slab 衬底层数的测试&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>一般而言，在使用 VASP 计算体系之前都需要对一些参数做收敛性测试，侯老师&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>
曾写过一本VASP 入门手册，里面给了一些测试计算参数的小脚本，这里我也给出一些我经常用的收敛性测试脚本，权当抛砖引玉了。&lt;/p></description></item><item><title>记一次 Julia 代码性能优化过程</title><link>http://ionizing.page/post/a-try-on-julia-code-optimization/</link><pubDate>Fri, 16 Apr 2021 13:06:00 +0800</pubDate><guid>http://ionizing.page/post/a-try-on-julia-code-optimization/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83">运行环境&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BC%98%E5%8C%96%E8%BF%87%E7%A8%8B">优化过程&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%8E%9F%E5%A7%8B%E7%89%88%E6%9C%AC">原始版本&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BD%BF%E7%94%A8-c-ffi-%E7%9A%84-rgamma-%E4%B8%8E-rnorm">使用 C-ffi 的 &lt;code>rgamma&lt;/code> 与 &lt;code>rnorm&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8E%BB%E9%99%A4%E5%A4%96%E9%83%A8%E4%BE%9D%E8%B5%96">去除外部依赖&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%83%85%E5%86%B5%E5%88%86%E6%9E%90">内存分配情况分析&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8E%BB%E9%99%A4%E5%86%85%E5%B1%82%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D">去除内层循环的内存分配&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8E%BB%E9%99%A4%E5%A4%96%E5%B1%82%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D">去除外层循环的内存分配&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8A%A0%E9%80%9F">使用多线程加速&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%80%BB%E7%BB%93">总结&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>这是和某三爷讨论后对交流内容的整理。&lt;/p></description></item><item><title>新的旅程</title><link>http://ionizing.page/post/a-new-journey/</link><pubDate>Wed, 14 Apr 2021 16:15:00 +0800</pubDate><guid>http://ionizing.page/post/a-new-journey/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#%E5%9B%9E%E5%BD%92">回归&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3">博客相关&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E9%85%8D%E7%BD%AE-%E6%A8%A1%E6%9D%BF">配置、模板&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%9B%BE%E7%89%87%E7%AD%89%E5%A4%96%E9%83%A8%E6%96%87%E4%BB%B6%E7%9A%84%E5%BC%95%E7%94%A8">图片等外部文件的引用&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BD%BF%E7%94%A8-tikz-%E9%85%8D%E5%90%88-orgmode-%E8%BF%9B%E8%A1%8C%E7%94%BB%E5%9B%BE-%E6%9B%B4%E6%96%B0">使用 TikZ 配合 Orgmode 进行画图 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->[2021-04-29 Thu] &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> 更新&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E8%BE%93%E5%87%BA-png-%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%9B%BE%E7%89%87">输出 PNG 格式的图片&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%BE%93%E5%87%BA-svg-%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%9B%BE%E7%89%87">输出 SVG 格式的图片&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>这是回归博客写作后的第一篇文章&lt;/p></description></item></channel></rss>